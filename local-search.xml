<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用hexo搭建个人博客并推送git</title>
    <link href="/2023/08/16/jiao_cheng_hexo/"/>
    <url>/2023/08/16/jiao_cheng_hexo/</url>
    
    <content type="html"><![CDATA[<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>今天教大家搭建一个<code>hexo框架</code>的博客，我现在用的就是这个框架的博客，使用起码挺方便的</p><p>本教程分为七步</p><ul><li><p>安装<code>nodejs</code></p><span id="more"></span></li><li><p>安装<code>git</code></p></li><li><p>安装&amp;配置<code>hexo</code></p></li><li><p>运行博客</p></li><li><p>配置主题</p></li><li><p>推送<code>GitHub</code></p></li><li><p>绑定域名</p><hr></li></ul><h2 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node_js"></a>安装node_js</h2><p>第一步打开<a href="https://nodejs.org/en">官网</a></p><p><img src="https://s1.ax1x.com/2023/08/16/pPlkbVO.png" alt="官网"></p><p>这里有两个版本 分别是<code>lts</code>版和<code>current</code>版 随便选择一个即可 我这里下的是<code>lts</code>版</p><p>如果你下载速度慢可以选择国内源 <code>这里下面是传送门</code></p><p><a href="https://npmmirror.com/mirrors/node/v18.16.1/node-v18.16.1-x64.msi">国内源lts</a></p><p><a href="https://npmmirror.com/mirrors/node/v20.4.0/node-v20.4.0-x64.msi">国内源current</a></p><p><img src="https://s1.ax1x.com/2023/08/16/pPlAns0.png"></p><p>按着步骤安装就行了</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlAQdU.png"></p><p>等待进度条跑完，关闭即可</p><hr><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p><a href="https://github.com/git-for-windows/git/releases/download/v2.41.0.windows.3/Git-2.41.0.3-64-bit.exe">点击我</a>即可下载 如果速度慢请开vpn</p><p><a href="https://github.com/git-for-windows/git/releases/download/v2.41.0.windows.3/Git-2.41.0.3-32-bit.exe">32位系统点击我下载</a></p><p>下载好后直接点<code>next</code>直到走完读条 此处无图略过</p><hr><h2 id="安装-amp-配置hexo"><a href="#安装-amp-配置hexo" class="headerlink" title="安装&amp;配置hexo"></a>安装&amp;配置hexo</h2><p>在你的桌面或者任意一处地方，创建一个博客文件夹，用来存放博客的代码</p><p>我这里以桌面进行</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlAXwT.png"></p><p>在该文件夹下按住鼠标右键+shift键 打开<code>open git bash here</code></p><p>然后弹出一个窗口 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br></code></pre></td></tr></table></figure><p>输入以上命令 检查nodejs是否安装好</p><p>不出意外会显示一个版本号 如果报错了请检查<code>环境变量</code></p><p><img src="https://s1.ax1x.com/2023/08/16/pPlE9p9.png"></p><p>接下来输入这三个命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br>hexo init<br>npm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><p>此处如果卡住开科学上网</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlEyAU.png"></p><p><img src="https://s1.ax1x.com/2023/08/16/pPlE6NF.png"></p><p>然后文件夹会多出很多文件</p><p>打开<code>_config.yml</code>文件 按如下说明更改博客配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Site</span><br>title: Hexo <span class="hljs-comment"># 博客标题</span><br>subtitle: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 小标题</span><br>description: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 描述</span><br>keywords: <span class="hljs-comment">#关键字</span><br>author: John Doe <span class="hljs-comment"># 作者名字</span><br>language: en <span class="hljs-comment"># 语言 改成zh-cn</span><br>timezone: <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 时区 默认不填</span><br></code></pre></td></tr></table></figure><p>其他的暂时不用改 先保存</p><hr><h2 id="运行博客"><a href="#运行博客" class="headerlink" title="运行博客"></a>运行博客</h2><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s -p 4000<br></code></pre></td></tr></table></figure><p>出现如下所示 说明启动成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo s -p 4000<br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br></code></pre></td></tr></table></figure><p>如果想取消按住你键盘上的<code>Ctrl</code>+<code>C</code>键</p><p>打开你的浏览器输入<code>localhost:4000</code> 访问一下</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlVyrt.png"></p><p>这样我们的博客就能在内网访问了</p><hr><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><p>没错 hexo有个主题商店 里面有好多不错的博客主题</p><p><a href="https://hexo.io/themes/">传送门</a></p><p>由于每种主题配置方法不一样 我这里就以<code>claudia</code>主题为例子</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlV7q0.png"></p><p>点击蓝色字体 跳转到他的<a href="https://github.com/Haojen/hexo-theme-Claudia">GitHub仓库</a></p><p>然后查看下面的文档 我这里的文档说要命令安装依赖 我们照着做就行了</p><p><img src="https://s1.ax1x.com/2023/08/16/pPlZVRH.png"></p><p>安装完依赖后开始下载代码放入博客<code>themes</code>文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> themes<br><span class="hljs-built_in">mkdir</span> Claudia<br><span class="hljs-built_in">cd</span> Claudia<br>git <span class="hljs-built_in">clone</span> https://github.com/Haojen/hexo-theme-Claudia<br></code></pre></td></tr></table></figure><p>或者你把源码打包下载 创建一个<code>Claudia</code>的文件夹 把源码放进去</p><p>他下面是教你配置主题的信息 我这里就跳过了 以文档的为准</p><p>返回博客跟目录 打开<code>_config.yml</code></p><p><img src="https://pic.imgdb.cn/item/64dc8ada661c6c8e54fea224.png"></p><p>移动到最下面把</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br>theme: landscape<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br>theme: Claudia <span class="hljs-comment">## 这里改成你的主题名字</span><br></code></pre></td></tr></table></figure><p>再运行一下博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s -p 4000<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/64dc8d99661c6c8e54061f95.png"></p><p>我这边已经进去了</p><p>如果你要一边改信息一边改效果 <code>改完之后直接刷新即可 无需重复启动博客</code></p><hr><h2 id="推送Github"><a href="#推送Github" class="headerlink" title="推送Github"></a>推送Github</h2><p>这里确保你已经注册了GitHub账号</p><p>这边先去新创建一个仓库 名字叫<code>你的GitHub名字.github.io</code></p><p>博主这边已经创建了</p><p><img src="https://pic.imgdb.cn/item/64dc8efb661c6c8e5409f8e7.png"></p><p>返回你的博客根目录 打开<code>_config.yml</code></p><p><img src="https://pic.imgdb.cn/item/64dc8ada661c6c8e54fea224.png"></p><p>移到最下面把</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br>deploy:<br>  <span class="hljs-built_in">type</span>: git<br>  repo: git@github.com:你的GitHub名字/你的GitHub名字.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><p>返回你的<code>git bash</code>配置 用户名和邮箱</p><p><img src="https://pic.imgdb.cn/item/64dc900c661c6c8e540cf890.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;your.email@example.com&quot;</span><br></code></pre></td></tr></table></figure><p>开始生成<code>ssh密钥</code> 输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&#x27;你的邮箱&#x27;</span><br></code></pre></td></tr></table></figure><p>一直按回车就行了</p><p><img src="https://img-blog.csdnimg.cn/2ebf6a3e7c4641cfbf3ac75c7807c0ef.png"></p><p>这样就代表成功了 然后按红色框的路径去找到密钥</p><p>用记事本打开全文复制</p><p>去GitHub配置-&gt;<a href="https://github.com/settings/keys">传送门</a></p><p><img src="https://pic.imgdb.cn/item/64dc9173661c6c8e5410f320.png"></p><p><img src="https://pic.imgdb.cn/item/64dc9147661c6c8e5410753e.png"></p><p>返回到博客跟目录 打开<code>open git bash hero</code> 输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br>hexo d<br></code></pre></td></tr></table></figure><ul><li><code>hexo g</code> 是编译静态网页文件的意思</li><li><code>hexo d</code>是推送<code>GitHub</code>的意思</li></ul><p>然后等个几分钟,浏览器打开<code>你的GitHub名字.github.io</code>即可打开你的博客</p><hr><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><p>在GitHub上打开你的博客仓库<code>名字是 你的名字GitHub名字.github.io</code></p><p><img src="https://pic.imgdb.cn/item/64dc92be661c6c8e5414bbb1.png"></p><p>点击设置</p><p>然后点击<code>page</code></p><p><img src="https://pic.imgdb.cn/item/64dc92f3661c6c8e54155a44.png"></p><p><img src="https://pic.imgdb.cn/item/64dc930a661c6c8e5415985c.png"></p><p>去你的域名解析 添加该域名的解析 这里以<code>dnspod</code>为例子</p><p><img src="https://pic.imgdb.cn/item/64dc93c3661c6c8e5418cd6f.png"></p><p>过个几分钟 你的博客就能访问了</p><hr><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>就这样吧 拜拜~~</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>hexo</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你配置签名服务器</title>
    <link href="/2023/08/03/qsign_1/"/>
    <url>/2023/08/03/qsign_1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为腾讯的限制 现在使用<code>go-cqhttp</code>需要签名服务器了 今天就来教大家手把手搭建一个签名服务器 支持<code>Windows</code>和<code>Linux</code> 在开始之前你要具备以下条件</p><ul><li>一台电脑</li><li>熟悉使用Linux</li><li>懂得自己解决问题</li></ul><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>1.首先安装jdk17 我这里默认装的17 当然你也可以装更高版本</p><span id="more"></span><p><a href="https://download.oracle.com/java/17/latest/jdk-17_windows-x64_bin.exe">jdk17下载链接</a></p><p>下载之后 根据提示一步一步安装</p><p><img src="https://s1.ax1x.com/2023/08/03/pPFiopn.png"></p><p>我这里不演示了 </p><p>然后去下载qsign 这里如果你是萌新小白</p><p>我自己做了一个懒人启动版 你是大佬也可以用官方的</p><p><a href="https://github.com/fuqiuluo/unidbg-fetch-qsign">官方下载 </a></p><p><a href="https://pan.baidu.com/s/1_FFXFa2PwHJZJYNJTcXgyQ?pwd=749f">懒人启动版下载</a></p><p>下载之后 解压文件</p><p>打开<code>txlib</code>文件夹 </p><p><img src="https://s1.ax1x.com/2023/08/03/pPFk8r6.png"></p><p>这里有三个版本的qq 请选择对应的协议版本</p><p>我这里用的是8963版本</p><p>打开<code>8.9.63</code>文件夹 找到<code>config.json</code>打开</p><p><img src="https://s1.ax1x.com/2023/08/03/pPFkNIe.png"></p><p><code>host</code> 改成<code>127.0.0.1</code> 如果你想本地搭建的话 你要部署到外网就填写 <code>0.0.0.0</code> </p><p><code>port</code>是端口号 我这里改成3301了</p><p><code>key</code> 看你喜欢 随便取一个key</p><p>改完之后记住这三个参数 分别是<code>host</code> <code>port</code> <code>key</code></p><p><img src="https://s1.ax1x.com/2023/08/03/pPFksqf.png"></p><p>这是我改的</p><p>然后返回文件夹</p><p><img src="https://s1.ax1x.com/2023/08/03/pPFk5Mq.png"></p><p>如果你下的是我的懒人启动版 直接打开<code>start.bat</code> 输入版本号就能运行</p><p><code>官方的启动</code>方法如下</p><p>按住键盘上的shift+鼠标右键 选择打开<code>powershell</code></p><p>输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin\unidbg-fetch-qsign.bat --basePath=txlib\qq版本<br></code></pre></td></tr></table></figure><p>这样你的签名服务器就启动成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">注意:请一定要记住你设置的 host port key<br>注意:请一定要记住你设置的 host port key<br>注意:请一定要记住你设置的 host port key<br></code></pre></td></tr></table></figure><p>然后在右边点<code>配置go-cqhttp</code> 跳转到配置部分 下面是Linux安装部分</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>这里我以纯shell操作 装了桌面端的操作类似于Windows吧</p><p>首先是安装<code>jdk</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt update &amp;&amp; sudo apt upgrade -y<br>sudo apt-get install openjdk-11-jre<br>sudo apt-get install openjdk-11-jdk<br></code></pre></td></tr></table></figure><p>执行如上三条命令 选择<code>y</code></p><p>最后输入<code>java --version</code> 如果和下图一样 说明jdk安装成功</p><p><img src="https://s1.ax1x.com/2023/08/03/pPFA9eK.png"></p><p>然后去下载<code>qsign</code></p><p><a href="https://github.com/fuqiuluo/unidbg-fetch-qsign">官方下载 </a></p><p><a href="https://pan.baidu.com/s/1_FFXFa2PwHJZJYNJTcXgyQ?pwd=749f">懒人启动版下载</a></p><p>这里推荐下载懒人启动版 然后通过一些方式把文件传到Linux里</p><p>然后cd进去 文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> unidbg-fetch-qsign-1.1.7<br><span class="hljs-built_in">cd</span> txlib<br><span class="hljs-built_in">cd</span> qq版本<br>有如下版本<br>8.9.63<br>8.9.68<br>8.9.70<br></code></pre></td></tr></table></figure><p>然后安装vim编辑器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install vim<br></code></pre></td></tr></table></figure><p>编辑<code>config.json</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim config.json<br></code></pre></td></tr></table></figure><p>按<code>i</code>键进入编辑模式</p><p>然后去修改<code>host</code> <code>port</code> <code>key</code></p><p><img src="https://s1.ax1x.com/2023/08/03/pPFEVNF.png"></p><p>我这里已经改好了 然后按<code>esc</code>键 退出编辑模式 输入<code>:wq</code> 保存并退出</p><p>然后退出跟目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ../../<br></code></pre></td></tr></table></figure><p>如果你下的是我的懒人启版只需要执行下面命令即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./start.sh<br>./start.sh<br></code></pre></td></tr></table></figure><p>官方的 输入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash bin\unidbg-fetch-qsign.bat --basePath=txlib\qq版本<br></code></pre></td></tr></table></figure><p>这样你的签名服务器就启动成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">注意:请一定要记住你设置的 host port key<br>注意:请一定要记住你设置的 host port key<br>注意:请一定要记住你设置的 host port key<br></code></pre></td></tr></table></figure><h2 id="配置go-cqhttp"><a href="#配置go-cqhttp" class="headerlink" title="配置go-cqhttp"></a>配置go-cqhttp</h2><p>正式发行版的cq是不支持签名服务器的 因此我们要下载dev分支的<code>go-cqhttp</code></p><p><a href="https://pan.baidu.com/s/1eooOkMrWynfNBgRbpsR3zA?pwd=iw2r">windows版本下载</a></p><p><code>Linux用户自己想办法 去官方GitHub看看</code></p><p>配置cq的教程前面说了  👉<a href="https://blog.bingyue.top/2022/10/03/cq_1/">传送门</a></p><p>我们只需在<code>config.yml</code>下 找到签名服务器的内容</p><p><img src="https://s1.ax1x.com/2023/08/03/pPFEq29.png"></p><p>按照如下格式设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sign-server: <span class="hljs-string">&#x27;http:&#123;你设置的host&#125;:&#123;你设置的port&#125;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">key: <span class="hljs-string">&#x27;你设置的key&#x27;</span><br></code></pre></td></tr></table></figure><p>然后保存退出 打开go-cqhttp点登录</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>去下面评论</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>qq机器人</tag>
      
      <tag>cqhttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QQ扫码登录抓取分析</title>
    <link href="/2023/07/31/qq_sao_ma/"/>
    <url>/2023/07/31/qq_sao_ma/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是七月份最后一篇博客，这几天家里一直有事，所以没怎么写，然后我朋友找我有没有办法搞一个验证QQ号是否本人的东西，我第一时间想到了扫码登录</p><p>所以本期教程来写一个封装的扫码登录</p><span id="more"></span><p>因为我很久不写php了 已经快忘光了 所以本期教程使用python</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>这里我选择<a href="https://xw.qq.com/?f=c_news">腾讯网</a> 点右上角头像，就是我们想要的扫码登录了</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qsyt.png"></p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qyOP.png"></p><p>这里就是二维码登录了</p><p>我们<code>右键鼠标-&gt;检查-&gt;网络</code> 然后<code>刷新页面</code></p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qgw8.png"></p><p>可以看到多了很多数据包</p><h2 id="申请二维码登录"><a href="#申请二维码登录" class="headerlink" title="申请二维码登录"></a>申请二维码登录</h2><p>往下寻找 可以看到有个请求二维码的接口</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9q2TS.png"></p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qWFg.png"></p><p>再看看 请求头 我们可以看到它 返回一个<code>qrsig的cookie</code> 这个应该是签名密钥了 标记二维码信息</p><p>这个api的信息是固定的 直接请求即可</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qfYQ.png"></p><p>我们目前得到了申请端的原理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">url : <br>https://ssl.ptlogin2.qq.com/ptqrshow?appid=716027609&amp;e=2&amp;l=M&amp;s=3&amp;d=72&amp;v=4&amp;t=0.9719602746914588&amp;daid=383&amp;pt_3rd_aid=100383922&amp;u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump<br>cookie: qrsig<br></code></pre></td></tr></table></figure><h2 id="心跳包"><a href="#心跳包" class="headerlink" title="心跳包"></a>心跳包</h2><p>我们可以看到它请求了很多次这个链接 无非这个链接就是获取二维码状态了</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qhWj.png"></p><p>看看返回内容 果然是</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9q5Ss.png"></p><p>再来看看它请求的参数 (我这边申请了两次二维码) 来看看有何不同</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qIln.png"></p><p>可以看到<code>ptqrtoken</code>和<code>action</code>发生了变化 </p><p>所以我们只需要解决这两个参数就能获取二维码状态了</p><p> 经过我在<code>fidder</code>的调试 发现<code>login_sig</code>不会影响结果 所以可以删掉<code>login_sig</code>这个参数 因此该api为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">https://ssl.ptlogin2.qq.com/ptqrlogin?u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump&amp;ptqrtoken=&#123;&#125;&amp;ptredirect=0&amp;h=1&amp;t=1&amp;g=1&amp;from_ui=1&amp;ptlang=2052&amp;action=0-0-&#123;&#125;&amp;js_ver=23071715&amp;js_type=1&amp;pt_uistyle=40&amp;aid=716027609&amp;daid=383&amp;pt_3rd_aid=100383922&amp;has_onekey=1&amp;&amp;o1vId=271f9cd6edb6fcd5b0cdbfea4b2646a0&amp;pt_js_version=v1.46.0<br></code></pre></td></tr></table></figure><p>这里的action不难看出 是一个13位的时间戳<code>0-0-&#123;13位时间戳&#125;</code></p><p>那<code>ptqrtoken</code>呢 这个时候需要<code>js逆向</code>了 因为找遍了所有请求</p><h2 id="解密ptqrtoken"><a href="#解密ptqrtoken" class="headerlink" title="解密ptqrtoken"></a>解密ptqrtoken</h2><p>切进去 这里就是js文件了</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9qoyq.png"></p><p>全局搜索一下<code>ptqrtoken</code></p><p><img src="https://pic.imgdb.cn/item/64c7fe141ddac507cca42800.jpg"></p><p>发现只有一处 先打个断点调试一下</p><p><img src="https://pic.imgdb.cn/item/64c7febb1ddac507cca50121.jpg"></p><p>由上面图片得到 这里的i是一个链接 但是它后面调用一个叫<code>hash33</code>的函数 并且带上了<code>qrsig</code> 那就在<code>hash33</code>打个断点 跳转进去</p><p><img src="https://pic.imgdb.cn/item/64c7ffb01ddac507cca6563c.png"></p><p>在返回结果继续打个断点 看看是不是我们想要的<code>ptqrtoken</code></p><p><img src="https://pic.imgdb.cn/item/64c800221ddac507cca6eb20.png"></p><p>嗯 这就是我们想要的<code>ptqrtoken</code> 同时t函数是<code>qrsig</code> 将以下代码翻译为<code>python</code> 示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ptqrtoken</span>(<span class="hljs-params">qsing: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    a = <span class="hljs-built_in">len</span>(qsing)<br>    <span class="hljs-built_in">hash</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,a):<br>        <span class="hljs-built_in">hash</span> += ((<span class="hljs-built_in">hash</span> &lt;&lt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">2147483647</span>) + <span class="hljs-built_in">ord</span>(qsing[i]) &amp; <span class="hljs-number">2147483647</span><br>        <span class="hljs-built_in">hash</span> &amp;= <span class="hljs-number">2147483647</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span> &amp; <span class="hljs-number">2147483647</span><br></code></pre></td></tr></table></figure><p>但是你会发现 即使解开了加密 还是访问不了二维码状态的api</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>这里你如果没安装<code>httpx</code>模块 可以通过以下命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install httpx<br></code></pre></td></tr></table></figure><p>这里笔者通过以下python代码进行了简单 封装</p><p><code>这里为申请二维码的</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><br>a = httpx.get(<span class="hljs-string">&quot;https://ssl.ptlogin2.qq.com/ptqrshow?appid=716027609&amp;e=2&amp;l=M&amp;s=3&amp;d=72&amp;v=4&amp;t=0.9719602746914588&amp;daid=383&amp;pt_3rd_aid=100383922&amp;u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./qrcode.jpg&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(a.content)<br>    f.close()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;qrsig&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf_8&quot;</span>) <span class="hljs-keyword">as</span> s:<br>    s.write(a.cookies[<span class="hljs-string">&quot;qrsig&quot;</span>])<br>    s.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取二维码成功&quot;</span>)<br></code></pre></td></tr></table></figure><p>获取<code>心跳包</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(<span class="hljs-string">&quot;qrsig&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.isfile(<span class="hljs-string">&quot;qrcode.jpg&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码信息读取失败,请打开get.py获取二维码&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;qrsig&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf_8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    qrsig = f.read().strip()<br>    f.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ptqrtoken</span>(<span class="hljs-params">qsing: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    a = <span class="hljs-built_in">len</span>(qsing)<br>    <span class="hljs-built_in">hash</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,a):<br>        <span class="hljs-built_in">hash</span> += ((<span class="hljs-built_in">hash</span> &lt;&lt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">2147483647</span>) + <span class="hljs-built_in">ord</span>(qsing[i]) &amp; <span class="hljs-number">2147483647</span><br>        <span class="hljs-built_in">hash</span> &amp;= <span class="hljs-number">2147483647</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span> &amp; <span class="hljs-number">2147483647</span><br><br>time_ = <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)<br>h = httpx.get(<span class="hljs-string">f&quot;https://ssl.ptlogin2.qq.com/ptqrlogin?u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump&amp;ptqrtoken=<span class="hljs-subst">&#123;get_ptqrtoken(qrsig)&#125;</span>&amp;ptredirect=0&amp;h=1&amp;t=1&amp;g=1&amp;from_ui=1&amp;ptlang=2052&amp;action=0-0-<span class="hljs-subst">&#123;time_&#125;</span>&amp;js_ver=23071715&amp;js_type=1&amp;pt_uistyle=40&amp;aid=716027609&amp;daid=383&amp;pt_3rd_aid=100383922&amp;has_onekey=1&amp;&amp;o1vId=271f9cd6edb6fcd5b0cdbfea4b2646a0&amp;pt_js_version=v1.46.0&quot;</span>)<br><span class="hljs-built_in">print</span>(h.status_code)<br></code></pre></td></tr></table></figure><p>如果不出意外 它会返回一个403的状态码 而不是200</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">403错误是禁止相应。是HTTP协议中的一个状态码(Status Code)。没有权限访问此站。403错误是网站访问过程中，常见的错误提示。<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">200状态码:表示请求已成功,请求所希望的响应头或数据体将随此响应返回<br></code></pre></td></tr></table></figure><p>猜想应该是缺少了一个参数</p><p>这个时候打开<code>fidder</code> 抓包软件</p><p>对端口进行抓取 选择<code>重发并编辑</code> 这边我删掉了<code>login_sig</code>参数 </p><p><img src="https://s1.ax1x.com/2023/08/01/pP9xwY8.png"></p><p>发现还是能正常运行 因此<code>login_sig</code>可以不填写</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9xsyj.png"></p><p>那继续删掉cookie试试能不能访问 如果删掉cookie还能访问 那就是跟cookie无关 否则就是cookie问题</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9xcmn.png"></p><p>发现403 看来不能访问跟cookie有关 <img src="https://s1.ax1x.com/2023/08/01/pP9xWkV.png"></p><p>那接下来 在cookie里继续删减一些无关参数 </p><p>这里经过我的测试 最后只需要留qrsig就行了 删了其他参数不影响api访问</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9zP0I.png"></p><p>在请求参数上面做了cookie 激动人心的200出现了</p><p><img src="https://s1.ax1x.com/2023/08/01/pP9z8hT.png"></p><p>再写一层封装就行了 最终代码如下面</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><code>get.py</code> 申请二维码登录的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><br>a = httpx.get(<span class="hljs-string">&quot;https://ssl.ptlogin2.qq.com/ptqrshow?appid=716027609&amp;e=2&amp;l=M&amp;s=3&amp;d=72&amp;v=4&amp;t=0.9719602746914588&amp;daid=383&amp;pt_3rd_aid=100383922&amp;u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./qrcode.jpg&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(a.content)<br>    f.close()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;qrsig&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>,encoding=<span class="hljs-string">&quot;utf_8&quot;</span>) <span class="hljs-keyword">as</span> s:<br>    s.write(a.cookies[<span class="hljs-string">&quot;qrsig&quot;</span>])<br>    s.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;获取二维码成功&quot;</span>)<br></code></pre></td></tr></table></figure><p>执行后 当前目录会生成一个二维码 以及保存一个qrsig 登录请使用扫一扫   <code>注意:不要使用二维码识别或者相册识别！！</code></p><p><code>2.py</code> 获取二维码状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> httpx<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(<span class="hljs-string">&quot;qrsig&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> os.path.isfile(<span class="hljs-string">&quot;qrcode.jpg&quot;</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码信息读取失败,请打开get.py获取二维码&quot;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;qrsig&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>,encoding=<span class="hljs-string">&quot;utf_8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    qrsig = f.read().strip()<br>    f.close()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ptqrtoken</span>(<span class="hljs-params">qsing: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    a = <span class="hljs-built_in">len</span>(qsing)<br>    <span class="hljs-built_in">hash</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,a):<br>        <span class="hljs-built_in">hash</span> += ((<span class="hljs-built_in">hash</span> &lt;&lt; <span class="hljs-number">5</span>) &amp; <span class="hljs-number">2147483647</span>) + <span class="hljs-built_in">ord</span>(qsing[i]) &amp; <span class="hljs-number">2147483647</span><br>        <span class="hljs-built_in">hash</span> &amp;= <span class="hljs-number">2147483647</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span> &amp; <span class="hljs-number">2147483647</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    time_ = <span class="hljs-built_in">int</span>(time.time() * <span class="hljs-number">1000</span>)<br>    h = httpx.get(<span class="hljs-string">f&quot;https://ssl.ptlogin2.qq.com/ptqrlogin?u1=https%3A%2F%2Fgraph.qq.com%2Foauth2.0%2Flogin_jump&amp;ptqrtoken=<span class="hljs-subst">&#123;get_ptqrtoken(qrsig)&#125;</span>&amp;ptredirect=0&amp;h=1&amp;t=1&amp;g=1&amp;from_ui=1&amp;ptlang=2052&amp;action=0-0-<span class="hljs-subst">&#123;time_&#125;</span>&amp;js_ver=23071715&amp;js_type=1&amp;pt_uistyle=40&amp;aid=716027609&amp;daid=383&amp;pt_3rd_aid=100383922&amp;has_onekey=1&amp;&amp;o1vId=271f9cd6edb6fcd5b0cdbfea4b2646a0&amp;pt_js_version=v1.46.0&quot;</span>,cookies=&#123;<span class="hljs-string">&quot;qrsig&quot;</span>:qrsig&#125;)<br><br>    <span class="hljs-keyword">if</span> h.status_code != <span class="hljs-number">200</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录遇到问题&quot;</span>)<br>        <span class="hljs-keyword">break</span><br>    <br>    k = h.text.split(<span class="hljs-string">&quot;,&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> k[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ptuiCB(&#x27;65&#x27;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码已失效&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> k[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ptuiCB(&#x27;67&#x27;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码已被扫描,等待被确认&quot;</span>)<br>        <br>    <span class="hljs-keyword">if</span> k[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ptuiCB(&#x27;68&#x27;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;二维码登录被拒绝&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> k[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ptuiCB(&#x27;66&#x27;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等待扫描二维码,二维码未失效&quot;</span>)<br>    <br>    <span class="hljs-keyword">if</span> k[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;ptuiCB(&#x27;0&#x27;&quot;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;登录成功\n以下是你的登录链接&quot;</span>)<br>        <span class="hljs-built_in">print</span>(k[<span class="hljs-number">2</span>])<br>        <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;按任意键退出\n&quot;</span>)<br>        <span class="hljs-keyword">break</span><br><br>    time.sleep(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>执行文件后 去扫描当前目录下的二维码 没有二维码请先执行<code>get.py</code> 如果没错误 则会返回一个登录链接 点进去就能登录了</p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p>这里我方便大家运行 我稍微改了一下 以下是传送门</p><p> 👇 👇 👇</p><p><a href="https://pan.baidu.com/s/1_vOP6DYKvODvB8RdyMDHnw?pwd=9ajb">传送门</a></p><p> 👆 👆 👆</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://s1.ax1x.com/2023/08/01/pP9zODs.png"></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇博文写了挺久的 希望能帮助到你 下期见！！！</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nonebot-金币管理系统(频道插件)</title>
    <link href="/2023/07/21/nonebot_guild_1/"/>
    <url>/2023/07/21/nonebot_guild_1/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>今天利用空闲时间写了一个金币的插件，做到优先同步内存，再同步数据库，在用户1000+的高频率使用下，已经做到毫无压力了，主要思路如下</p><ul><li><p>开机做好预处理，把全部用户数据加载出来，并缓存在内存中</p><span id="more"></span></li><li><p>动态维护 对内存里的数据进行加减</p></li><li><p>再统一提交给数据库</p></li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>本插件下载链接 👇 👇</p><p><a href="https://pan.baidu.com/s/1jF7TRDURJzil_ZX_i2S1Dg?pwd=ctr8">传送门</a></p><p> ☝ ☝ ☝</p><p>添加到你的频道插件目录下 并在 <code>pyproject.toml</code>里添加该文件夹</p><p><img src="https://s1.ax1x.com/2023/07/21/pCbYmwQ.png"></p><p>我这里把插件放在plugin文件夹里了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugin_dirs = [<span class="hljs-string">&quot;plugin&quot;</span>] <span class="hljs-comment"># 添加该插件所在的文件夹</span><br></code></pre></td></tr></table></figure><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>1.核心代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 作者:bingyue</span><br><span class="hljs-comment">## QQ: 35***19417</span><br><span class="hljs-comment">## 一个高效率的写法，适合用于金币好感度</span><br><br><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_command, on_fullmatch<br><span class="hljs-keyword">from</span> nonebot.permission <span class="hljs-keyword">import</span> SUPERUSER<br><span class="hljs-keyword">from</span> nonebot.params <span class="hljs-keyword">import</span> CommandArg<br><span class="hljs-keyword">from</span> nonebot.adapters.qqguild <span class="hljs-keyword">import</span> Message, MessageEvent<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> sqlite_conn<br><br>a = on_command(<span class="hljs-string">&quot;增加金币&quot;</span>,permission=SUPERUSER)<br>b = on_command(<span class="hljs-string">&quot;减少金币&quot;</span>,permission=SUPERUSER)<br>c = on_fullmatch(<span class="hljs-string">&quot;查询金币&quot;</span>)<br><br><span class="hljs-meta">@a.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">b: Message = CommandArg(<span class="hljs-params"></span>)</span>):<br>    c = <span class="hljs-built_in">list</span>(b)<br>    <span class="hljs-keyword">await</span> add_jb(c[<span class="hljs-number">0</span>].data[<span class="hljs-string">&quot;user_id&quot;</span>],<span class="hljs-built_in">int</span>(c[<span class="hljs-number">1</span>].data[<span class="hljs-string">&quot;text&quot;</span>].strip()))<br>    <span class="hljs-keyword">await</span> a.finish(<span class="hljs-string">&quot;添加金币成功！&quot;</span>)<br><br><span class="hljs-meta">@b.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">d: Message = CommandArg(<span class="hljs-params"></span>)</span>):<br>    c = <span class="hljs-built_in">list</span>(d)<br>    <span class="hljs-keyword">await</span> del_jb(c[<span class="hljs-number">0</span>].data[<span class="hljs-string">&quot;user_id&quot;</span>],<span class="hljs-built_in">int</span>(c[<span class="hljs-number">1</span>].data[<span class="hljs-string">&quot;text&quot;</span>]))<br>    <span class="hljs-keyword">await</span> b.finish(<span class="hljs-string">&quot;减少金币成功&quot;</span>)<br><br><span class="hljs-meta">@c.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">event: MessageEvent</span>):<br>    j = <span class="hljs-keyword">await</span> find_jb(event.get_user_id())<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">await</span> c.finish(<span class="hljs-string">&quot;你目前的金币为0&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">await</span> c.finish(<span class="hljs-string">f&quot;你目前的金币为<span class="hljs-subst">&#123;j&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_jb</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>:<span class="hljs-built_in">str</span>, e:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    增加好感度</span><br><span class="hljs-string"></span><br><span class="hljs-string">    id: 你的频道号</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    e: 增加的具体数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    j = <span class="hljs-keyword">await</span> find_jb(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        sqlite_conn.conn_jb.cursor().execute(<span class="hljs-string">f&#x27;insert into `jb` (`id`,`jb`) values(&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;,<span class="hljs-subst">&#123;e&#125;</span>)&#x27;</span>)<br>        sqlite_conn.h[<span class="hljs-built_in">id</span>] = e<br>    <span class="hljs-keyword">else</span>:<br>        sqlite_conn.conn_jb.cursor().execute(<span class="hljs-string">f&#x27;UPDATE `jb` SET jb=<span class="hljs-subst">&#123;j+e&#125;</span> WHERE id=&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;&#x27;</span>)<br>        sqlite_conn.h[<span class="hljs-built_in">id</span>] += e<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_jb</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>:<span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    查询好感度</span><br><span class="hljs-string"></span><br><span class="hljs-string">    id: 你的频道号id</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> sqlite_conn.h:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> sqlite_conn.h[<span class="hljs-built_in">id</span>]<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">del_jb</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>:<span class="hljs-built_in">str</span>, e:<span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    减少好感度</span><br><span class="hljs-string"></span><br><span class="hljs-string">    id: 你的频道号</span><br><span class="hljs-string"></span><br><span class="hljs-string">    e: 减少的具体数据</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    j = <span class="hljs-keyword">await</span> find_jb(<span class="hljs-built_in">id</span>)<br>    <span class="hljs-keyword">if</span> j <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        sqlite_conn.conn_jb.cursor().execute(<span class="hljs-string">f&#x27;insert into `jb` (`id`,`jb`) values(&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;,<span class="hljs-subst">&#123;-e&#125;</span>)&#x27;</span>)<br>        sqlite_conn.h[<span class="hljs-built_in">id</span>] = -e<br>    <span class="hljs-keyword">else</span>:<br>        sqlite_conn.conn_jb.cursor().execute(<span class="hljs-string">f&#x27;UPDATE `jb` SET jb=<span class="hljs-subst">&#123;j-e&#125;</span> WHERE id=&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">id</span>&#125;</span>&quot;&#x27;</span>)<br>        sqlite_conn.h[<span class="hljs-built_in">id</span>] -= e<br></code></pre></td></tr></table></figure><p>2.连接数据库，预处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 作者:bingyue</span><br><span class="hljs-comment">## QQ: 35***19417</span><br><span class="hljs-comment">## 一个高效率的写法，适合用于金币好感度</span><br><br><span class="hljs-keyword">from</span> nonebot.log <span class="hljs-keyword">import</span> logger<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sqlite3<br><br>h = &#123;&#125;<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(<span class="hljs-string">&quot;data&quot;</span>):<br>    logger.error(<span class="hljs-string">&quot;未检测到data文件,正在创建&quot;</span>)<br>    os.mkdir(<span class="hljs-string">&quot;data&quot;</span>)<br>    logger.success(<span class="hljs-string">&quot;创建data文件夹成功&quot;</span>)<br>    <br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(<span class="hljs-string">&quot;data/jb.db&quot;</span>):<br>    conn_jb = sqlite3.connect(<span class="hljs-string">&quot;data/jb.db&quot;</span>)<br>    logger.warning(<span class="hljs-string">&quot;正在加载数据库！！&quot;</span>)<br>    conn_jb.cursor().execute(<span class="hljs-string">f&quot;CREATE TABLE `jb` (`id` text, `jb` int(12))&quot;</span>)<br>    conn_jb.commit()<br>    logger.success(<span class="hljs-string">&quot;创建表格完毕&quot;</span>)<br><br>conn_jb = sqlite3.connect(<span class="hljs-string">&quot;data/jb.db&quot;</span>)<br><br>q = conn_jb.cursor().execute(<span class="hljs-string">f&quot;SELECT * from `jb`&quot;</span>).fetchall()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> q:<br>    h[i[<span class="hljs-number">0</span>]] = i[<span class="hljs-number">1</span>]<br><br></code></pre></td></tr></table></figure><p>3.定时同步给数据库</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Py"><span class="hljs-comment">## 作者:bingyue</span><br><span class="hljs-comment">## QQ: 35***19417</span><br><span class="hljs-comment">## 一个高效率的写法，适合用于金币好感度</span><br><br><span class="hljs-keyword">from</span> nonebot_plugin_apscheduler <span class="hljs-keyword">import</span> scheduler<br><span class="hljs-keyword">from</span> . <span class="hljs-keyword">import</span> sqlite_conn<br><span class="hljs-keyword">from</span> nonebot.log <span class="hljs-keyword">import</span> logger<br><br><span class="hljs-meta">@scheduler.scheduled_job(<span class="hljs-params"><span class="hljs-string">&#x27;interval&#x27;</span>, seconds=<span class="hljs-number">60</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">eveny_day</span>() -&gt; <span class="hljs-literal">None</span>:<br>    sqlite_conn.conn_jb.commit()<br>    logger.success(<span class="hljs-string">&quot;同步数据成功！&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>qq频道</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nonebot-qq频道适配器教程</title>
    <link href="/2023/07/20/nonebot_guild/"/>
    <url>/2023/07/20/nonebot_guild/</url>
    
    <content type="html"><![CDATA[<p>大家好，今天教大家一期，使用nonebot的qq频道适配器去对接官方的频道bot，你需要准备以下工具</p><ul><li>一台电脑</li><li>python环境</li><li>去官方申请的key</li><li>vscode <code>(其他代码编辑器也行)</code></li></ul><span id="more"></span><h2 id="申请官方key"><a href="#申请官方key" class="headerlink" title="申请官方key"></a>申请官方key</h2><p>登录<a href="https://q.qq.com/#/">QQ开发平台</a>，没有账号可以去注册一个号，我这边已经注册好了</p><p><img src="https://s1.ax1x.com/2023/07/20/pCH8cbd.png"></p><p><img src="https://s1.ax1x.com/2023/07/20/pCHG4oR.png"></p><p>我这里已经申请到key了，你申请之后官方会给你三个票据</p><table><thead><tr><th>bot_app_id</th><th>用于识别一个机器人的 id</th></tr></thead><tbody><tr><td>bot_secret</td><td>用于在 oauth 场景进行请求签名的密钥</td></tr><tr><td>bot_token</td><td>机器人token，用于以机器人身份调用 openapi，格式为 ${app_id}.${random_str}</td></tr></tbody></table><p>这三个东西非常重要 接下来我们去下载nonebot封装的适配器</p><h2 id="下载适配器"><a href="#下载适配器" class="headerlink" title="下载适配器"></a>下载适配器</h2><h3 id="手动下载"><a href="#手动下载" class="headerlink" title="手动下载"></a>手动下载</h3><p>打开<code>powershell</code>输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nb adapter install nonebot-adapter-qqguild<br>nb driver install nonebot2[aiohttp]<br></code></pre></td></tr></table></figure><p>安装适配器后 打开你的插件目录 找到<code>pyproject.toml</code></p><p><img src="https://s1.ax1x.com/2023/07/20/pCHJDne.png"></p><p>把<code>adapters</code>适配器里添加<code>qq频道适配器</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adapters = [<br>    &#123; name = <span class="hljs-string">&quot;QQ 频道&quot;</span>, module_name = <span class="hljs-string">&quot;nonebot.adapters.qqguild&quot;</span> &#125;<br>]<br></code></pre></td></tr></table></figure><p>再找到<code>.env</code>文件  </p><p>把<code>DRIVER=~fastapi</code></p><p><img src="https://s1.ax1x.com/2023/07/20/pCHJo7j.png"></p><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ENVIRONMENT=dev<br>DRIVER=~aiohttp<br></code></pre></td></tr></table></figure><h3 id="懒人安装"><a href="#懒人安装" class="headerlink" title="懒人安装"></a>懒人安装</h3><p>在创建项目的时候 把驱动器改成aiohttp 同时适配器选择qq频道</p><p><img src="https://s1.ax1x.com/2023/07/20/pCHJxuF.png"></p><p><img src="https://s1.ax1x.com/2023/07/20/pCHJzB4.png"></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>完事之后，打开你的<code>env.dev.</code></p><p>输入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">QQGUILD_BOTS=<span class="hljs-string">&#x27;</span><br><span class="hljs-string">[</span><br><span class="hljs-string">  &#123;</span><br><span class="hljs-string">    &quot;id&quot;: &quot;xxx&quot;, #这里是bot_id</span><br><span class="hljs-string">    &quot;token&quot;: &quot;xxx&quot;, # 这里是 bot_secret</span><br><span class="hljs-string">    &quot;secret&quot;: &quot;xxx&quot;, # 这里是bot_token</span><br><span class="hljs-string">    &quot;intent&quot;: &#123;</span><br><span class="hljs-string">      &quot;guild_messages&quot;: true,</span><br><span class="hljs-string">      &quot;at_messages&quot;: false</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>保存</p><p>在当前目录下启动nb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">07-20 19:59:42 [INFO] nonebot | QQ Guild | Bot ********* connected<br>07-20 19:59:42 [SUCCESS] nonebot | QQ Guild ********** | [READY]: &#123;<span class="hljs-string">&#x27;version&#x27;</span>: 1, <span class="hljs-string">&#x27;session_id&#x27;</span>: <span class="hljs-string">&#x27;********************&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>: &#123;<span class="hljs-string">&#x27;id&#x27;</span>: **********, <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;*****&#x27;</span>, <span class="hljs-string">&#x27;avatar&#x27;</span>: None, <span class="hljs-string">&#x27;bot&#x27;</span>: True, <span class="hljs-string">&#x27;union_openid&#x27;</span>: None, <span class="hljs-string">&#x27;union_user_account&#x27;</span>: None&#125;, <span class="hljs-string">&#x27;shard&#x27;</span>: (0, 1)&#125;<br></code></pre></td></tr></table></figure><p>如果出现上述东西 说明已连接成功 可以自由收发消息了</p><h2 id="插件示例"><a href="#插件示例" class="headerlink" title="插件示例"></a>插件示例</h2><p>这里只展示一些基础写法，可以参考一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_fullmatch<br><span class="hljs-keyword">from</span> nonebot.adapters.qqguild <span class="hljs-keyword">import</span> MessageEvent, MessageSegment<br><br>a = on_fullmatch(<span class="hljs-string">&quot;/获取用户id&quot;</span>)<br><br><span class="hljs-meta">@a.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">event: MessageEvent</span>):<br>    <span class="hljs-keyword">await</span> a.finish(<span class="hljs-string">f&quot;你的用户id为:<span class="hljs-subst">&#123;event.get_user_id()&#125;</span>&quot;</span>)<br><br>b = on_fullmatch(<span class="hljs-string">&quot;/你好&quot;</span>)<br><br><span class="hljs-meta">@b.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(<span class="hljs-params">event: MessageEvent</span>):<br>    <span class="hljs-keyword">await</span> b.finish(MessageSegment.reference(event.<span class="hljs-built_in">id</span>)+<span class="hljs-string">&quot;你也好呀！&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/07/20/pCH0usx.png"></p>]]></content>
    
    
    <categories>
      
      <category>qq频道</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oppo/真我解锁bl (仅限mtk)</title>
    <link href="/2023/07/12/oppo_realme_bl/"/>
    <url>/2023/07/12/oppo_realme_bl/</url>
    
    <content type="html"><![CDATA[<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>感谢大佬<a href="">@^0^/＊</a>提供的援助</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本期教程可能繁琐，适用于不支持深度计划解锁的oppo/真我 手机的bl，以及后半篇讲到如何去除dm和avb校验，到最后成功装上magisk的全教程,<del>这可能是全网最详细的教程了吧！</del> 以下是基础科普</p><span id="more"></span><p>总结： oppo/真我 的bl有三道防线 <code>解锁bl-&gt;去除dm-&gt;avb</code></p><p>1.什么是bl</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行。可以初始化硬件设备、建立内存空间映射图，<br>从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。<br>在解开BL锁之前，用户是无法自由进行刷机操作和ROOT操作的。部分手机官方为了保证手机的安全，<br>为手机设置了BL锁，在BL锁未解的情况下，用户是不能自行刷机或获取ROOT权限的。 <br></code></pre></td></tr></table></figure><p>2.什么是dm-verify?为什么要去除他</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">它是一个专门校验分区的模块，通过哈希对比，<br>去查看分区是否被篡改，因为我们root会修改boot分区，<br>所以要去除dm-verify<br></code></pre></td></tr></table></figure><p>3.avb是什么？为什么也要去除它</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">avb校验功能主要是由external/avb/libavb库实现的<br>该库主要完成的工作包括各个分区镜像的校验，签名验证，以及vbmeta数据的解析，<br>包括了各种flags的处理以及dm-verity所需要的参数解析。同上root会修改分区内容<br></code></pre></td></tr></table></figure><h2 id="解锁bl的前期准备"><a href="#解锁bl的前期准备" class="headerlink" title="解锁bl的前期准备"></a>解锁bl的前期准备</h2><p>首先确保你电脑有python环境 如果没python环境可以去参考我之前做qqbot的教程</p><p><a href="https://blog.bingyue.top/2022/10/03/python_start/#more">传送门</a></p><p><a href="https://www.aliyundrive.com/s/qza2oEVVjFV">下载本工具</a> 打开直接安装</p><p><img src="https://s1.ax1x.com/2023/07/08/pCgGgrF.png" alt="等待进度条跑完"></p><p><a href="https://pan.baidu.com/s/1QzxifgdJ8EEB55NhUFEI4g?pwd=f9rf">点击下载强解工具</a></p><p>解压 如图</p><p><img src="https://s1.ax1x.com/2023/07/08/pCgGWVJ.png"></p><p>按住你键盘上的<code>shift</code>键 点击鼠标右键 选择 <code>打开powershell</code></p><p>输入如下命令 将你的python源切换到清华</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>再输入以下命令 安装强解工具 所需的第三方库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -r requirements.txt<br></code></pre></td></tr></table></figure><p>这样我们的解锁工具就配置好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">注意：以下的内容请阅读<br>首先确保你的coloros/realme os 是出厂版本<br>本人建议安卓11/安卓10的机型解锁<br>如果你机子是安卓12/安卓13 解锁有可能失败<br>请你一定做好相关的救砖准备！！！<br>请你一定做好相关的救砖准备！！！<br>请你一定做好相关的救砖准备！！！<br></code></pre></td></tr></table></figure><h2 id="解锁bl-安卓10以下的设备"><a href="#解锁bl-安卓10以下的设备" class="headerlink" title="解锁bl  安卓10以下的设备"></a>解锁bl  安卓10以下的设备</h2><p>在powershell里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk da seccfg unlock<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/07/08/pCgJYJ1.png"></p><p>这个时候 按住电源键+音量上下键 等待驱动安装 开始读条</p><p><img src="https://s1.ax1x.com/2023/07/08/pCgJdsO.png"></p><p>出现这样就成功了</p><p>这个时候拔掉数据线 按住电源键 重启手机</p><p>如果不出意外 你开机将会看到如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Your device has been unlocked and can<span class="hljs-string">&#x27;t be trusted.</span><br><span class="hljs-string">Your device will boot in 5 seconds.</span><br></code></pre></td></tr></table></figure><h2 id="解锁bl-安卓11以上的设备"><a href="#解锁bl-安卓11以上的设备" class="headerlink" title="解锁bl 安卓11以上的设备"></a>解锁bl 安卓11以上的设备</h2><p>注意 你的设备是安卓11 你解开之后是有dm校验的 而且bl也没成功 这得归功于oppo的傻逼底层 而oppo/真我 却把dm藏在 <code>lk</code>分区</p><p>所以今下来先干掉lk 再去强解bl</p><p>在powershell里输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk r lk,lk2 lk.bin,lk2.bin<br></code></pre></td></tr></table></figure><p>备份官方的lk （一定要保存好,我这里重命名为 <code>lk.base</code>和<code>lk2.base</code>）</p><p>这里得看你的设备有多少个lk分区 我这台手机两个</p><p>提取之后 刷入解锁的lk <a href="https://pan.baidu.com/s/1sHpbB_CKnealwsxclSA-uw?pwd=9ji7">下载连接</a></p><p>放到mtkclient目录下 把这个文件刷入到两个分区里</p><p>重命名一下吧 就叫<code>lk.bin</code>好了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk w lk,lk2 lk.bin,lk.bin<br></code></pre></td></tr></table></figure><p>强开bl</p><p><img src="https://s1.ax1x.com/2023/07/08/pCgJdsO.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk da seccfg unlock<br></code></pre></td></tr></table></figure><p>拔掉数据线 先按电源键激活一下lk 如果出现黑屏+振动 请不要担心 正常现象 </p><p>这个时候你的手机就跟黑砖一样 但端口不能寄 </p><p>继续按住 电源键+音量上+音量下</p><p>继续刷回官方的lk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk w lk,lk2 lk.base,lk2.base<br></code></pre></td></tr></table></figure><p>按一下电源键 如果看到了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Your device has been unlocked and can<span class="hljs-string">&#x27;t be trusted.</span><br><span class="hljs-string">Your device will boot in 5 seconds.</span><br></code></pre></td></tr></table></figure><p>说明bl锁已经打开了 </p><p>你会发现你进不了桌面 这个时候你等半个小时左右吧 待会会有3-4次重启 记得按电源键</p><p>然后进入到rec 点<code>清除数据-&gt;格式化数据分区-&gt;输入验证码-&gt;完成清除-&gt;重启</code></p><p><code>设置-&gt;关于本机-&gt;版本信息-&gt;连按版本号-&gt;返回-&gt;更多设置-&gt;开发者选项</code></p><p><img src="https://s1.ax1x.com/2023/07/12/pCfVWXd.png"></p><p>我这里oem解锁变灰了 说明bl解锁成功了</p><h2 id="刷入magisk"><a href="#刷入magisk" class="headerlink" title="刷入magisk"></a>刷入magisk</h2><p>按住电源键+音量上下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python mtk r boot boot.img<br></code></pre></td></tr></table></figure><p>提取boot</p><p>手机安装magisk <a href="https://github.com/topjohnwu/Magisk/releases/download/v26.1/Magisk-v26.1.apk">下载链接</a></p><p>去修补boot 切记 不要开<code>修补vbmeta</code></p><p>连接adb 输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell<br>reboot fastboot<br>fastboot flash boot boot.img(这一空是你修改好的面具boot 拖入到poershell就行)<br></code></pre></td></tr></table></figure><p>如图所示</p><p><img src="https://s1.ax1x.com/2023/07/12/pCfMh26.png"></p><p>刷入成功了</p><p>重启手机 看效果吧</p><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>你吃上了root没</p><p><img src="https://s1.ax1x.com/2023/07/12/pCfVR6H.png"></p>]]></content>
    
    
    <categories>
      
      <category>mtk</category>
      
      <category>刷机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootloader</tag>
      
      <tag>刷机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nonebot2 二编写基础插件</title>
    <link href="/2023/07/04/nonebot_teach_3/"/>
    <url>/2023/07/04/nonebot_teach_3/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>相信经过前面的学习 大家已经学会启动nonebot了 和 加载插件 那今天我们写一个插件</p><h2 id="认识Nonebot文件结构"><a href="#认识Nonebot文件结构" class="headerlink" title="认识Nonebot文件结构"></a>认识Nonebot文件结构</h2><p>在上一篇中 我们创建了一个nb项目</p><span id="more"></span><p>以下是该文件结构</p><p><img src="https://s1.ax1x.com/2023/06/30/pC0g00O.png"></p><p>我们先打开<code>pyproject.toml</code></p><p>内容如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">[project]<br>name = <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-comment"># 插件名字</span><br>version = <span class="hljs-string">&quot;0.1.0&quot;</span> <span class="hljs-comment"># 插件版本</span><br>description = <span class="hljs-string">&quot;test&quot;</span> <span class="hljs-comment"># 插件介绍</span><br>readme = <span class="hljs-string">&quot;README.md&quot;</span> <span class="hljs-comment"># 插件文档</span><br>requires-python = <span class="hljs-string">&quot;&gt;=3.8, &lt;4.0&quot;</span> <span class="hljs-comment"># 适用py版本 (勿动)</span><br><br>[tool.nonebot]<br>adapters = [<br>    &#123; name = <span class="hljs-string">&quot;OneBot V11&quot;</span>, module_name = <span class="hljs-string">&quot;nonebot.adapters.onebot.v11&quot;</span> &#125;<br>] <span class="hljs-comment"># 勿动</span><br>plugins = []<br>plugin_dirs = [<span class="hljs-string">&quot;src/plugins&quot;</span>]<br>builtin_plugins = [<span class="hljs-string">&quot;echo&quot;</span>]<br></code></pre></td></tr></table></figure><p>看到</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins = []<br>plugin_dirs = [<span class="hljs-string">&quot;src/plugins&quot;</span>]<br>builtin_plugins = [<span class="hljs-string">&quot;echo&quot;</span>]<br></code></pre></td></tr></table></figure><p>plugins是加载成品的加载 也就是你从nb官网下载的插件</p><p>一般以这种形式开头</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugins = [<span class="hljs-string">&quot;nonebot_plugin_xxxx&quot;</span>]<br></code></pre></td></tr></table></figure><p>plugin_dirs 则是加载文件夹里的插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">plugin_dirs = [<span class="hljs-string">&quot;src/plugins&quot;</span>] <span class="hljs-comment"># 加载scr文件夹里的plugin文件夹下的插件</span><br></code></pre></td></tr></table></figure><p>builtin_plugins 则是加载官方内置的插件 一般用不到 可以改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">builtin_plugins = []<br></code></pre></td></tr></table></figure><p>改好之后保存即可</p><p>打开<code>.env.dev</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">LOG_LEVEL=DEBUG<br></code></pre></td></tr></table></figure><p>我们删除这句话 并添加如下内容</p><p>注意 这里不要使用系统自带记事本取修改 否则会报如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">UnicodeDecodeError: <span class="hljs-string">&#x27;utf-8&#x27;</span> codec can<span class="hljs-string">&#x27;t decode byte 0xc5 in position 16: invalid continuation byte</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">HOST=0.0.0.0  <span class="hljs-comment"># 配置 NoneBot 监听的 IP / 主机名 默认127.0.0.1</span><br>PORT=8080  <span class="hljs-comment"># 配置 NoneBot 监听的端口 这里设置成你的cq对接的端口号</span><br>COMMAND_START=[<span class="hljs-string">&quot;/&quot;</span>]  <span class="hljs-comment"># 配置命令起始字符</span><br>COMMAND_SEP=[<span class="hljs-string">&quot;.&quot;</span>]  <span class="hljs-comment"># 配置命令分割字符</span><br>SUPERUSERS=[<span class="hljs-string">&quot;你的qq号&quot;</span>] <span class="hljs-comment"># nb超级管理员 输入你的qq号</span><br><br></code></pre></td></tr></table></figure><p>这样配置基础就做好了</p><h2 id="开启环境"><a href="#开启环境" class="headerlink" title="开启环境"></a>开启环境</h2><p>在你的<code>scr/plugins</code> 创建一个py文件 名字随意</p><p><img src="https://s1.ax1x.com/2023/06/30/pC028Df.png"></p><p>用vscode打开他</p><p>编写如下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_command<br><br>a = on_command(<span class="hljs-string">&quot;你好&quot;</span>) <span class="hljs-comment"># 设置一个消息指令</span><br><br><span class="hljs-meta">@a.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>(): <span class="hljs-comment"># 当触发这个消息的时候 async def里的代码会被执行</span><br>    <span class="hljs-keyword">await</span> a.finish(<span class="hljs-string">&quot;hello world&quot;</span>) <span class="hljs-comment"># 结束事件返回一句 hello world</span><br></code></pre></td></tr></table></figure><p>保存</p><p>启动你的nb和cq</p><p>向你的机器人回复一句<code>你好</code> 你便会收到一句<code>hello world</code></p><h2 id="插件编写"><a href="#插件编写" class="headerlink" title="插件编写"></a>插件编写</h2><table><thead><tr><th>函数</th><th align="left">作用</th></tr></thead><tbody><tr><td>on_command</td><td align="left">设置消息关键字 当消息开头包含关键字即触发</td></tr><tr><td>on_fullmatch</td><td align="left">设置消息关键字 当关键字与消息完全一致时触发</td></tr><tr><td>on_keyword</td><td align="left">设置消息关键字 当消息包含关键字时触发</td></tr><tr><td>random.randint(0,7)</td><td align="left">生成一个0~7的随机数 可以随意更改</td></tr><tr><td>random.choice(a)</td><td align="left">从a列表里随机挑一个出来</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_fullmatch<br><span class="hljs-keyword">import</span> random<br><br>a = on_fullmatch(<span class="hljs-string">&quot;随机人生&quot;</span>)<br><br><span class="hljs-meta">@a.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>():<br>    name = [<span class="hljs-string">&quot;大音希声&quot;</span>,<span class="hljs-string">&quot;恬静可人&quot;</span>,<span class="hljs-string">&quot;珞珞如石&quot;</span>] <span class="hljs-comment"># 姓名</span><br>    age = random.randint(<span class="hljs-number">19</span>,<span class="hljs-number">27</span>) <span class="hljs-comment"># 随机年龄</span><br>    job = [<span class="hljs-string">&quot;行政主管&quot;</span>,<span class="hljs-string">&quot;企业主管&quot;</span>,<span class="hljs-string">&quot;经理人&quot;</span>,<span class="hljs-string">&quot;土木营造监工&quot;</span>] <span class="hljs-comment"># 职业</span><br><br>    name_ = random.choice(name) <span class="hljs-comment"># 随机姓名</span><br>    job_ = random.choice(job)<br><br>    <span class="hljs-keyword">await</span> a.finish(<span class="hljs-string">f&quot;姓名:<span class="hljs-subst">&#123;name_&#125;</span>\n年龄:<span class="hljs-subst">&#123;age&#125;</span>\n职业:<span class="hljs-subst">&#123;job_&#125;</span>&quot;</span>) <span class="hljs-comment"># 结束事件并发送消息</span><br></code></pre></td></tr></table></figure><p>以上为一个基础的插件 如不出意外 你会收到机器人回复</p><p>我们可以进一步的改进一下 例如加一些等待</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> nonebot <span class="hljs-keyword">import</span> on_fullmatch<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> asyncio<br><br>a = on_fullmatch(<span class="hljs-string">&quot;随机人生&quot;</span>)<br><br><span class="hljs-meta">@a.handle()</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">_</span>():<br>    name = [<span class="hljs-string">&quot;大音希声&quot;</span>,<span class="hljs-string">&quot;恬静可人&quot;</span>,<span class="hljs-string">&quot;珞珞如石&quot;</span>] <span class="hljs-comment"># 姓名</span><br>    age = random.randint(<span class="hljs-number">19</span>,<span class="hljs-number">27</span>) <span class="hljs-comment"># 随机年龄</span><br>    job = [<span class="hljs-string">&quot;行政主管&quot;</span>,<span class="hljs-string">&quot;企业主管&quot;</span>,<span class="hljs-string">&quot;经理人&quot;</span>,<span class="hljs-string">&quot;土木营造监工&quot;</span>] <span class="hljs-comment"># 职业</span><br><br>    <span class="hljs-keyword">await</span> a.send(<span class="hljs-string">&quot;请稍等，正在生成中&quot;</span>) <span class="hljs-comment"># 发送一条消息</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">3</span>) <span class="hljs-comment"># 冷却3秒</span><br><br>    name_ = random.choice(name) <span class="hljs-comment"># 随机姓名</span><br>    job_ = random.choice(job)<br><br>    <span class="hljs-keyword">await</span> a.finish(<span class="hljs-string">f&quot;姓名:<span class="hljs-subst">&#123;name_&#125;</span>\n年龄:<span class="hljs-subst">&#123;age&#125;</span>\n职业:<span class="hljs-subst">&#123;job_&#125;</span>&quot;</span>) <span class="hljs-comment"># 结束事件并发送消息</span><br></code></pre></td></tr></table></figure><p>这样更完美了 当然你也可以加一些数据进去</p><p>这算是个基础插件编写了</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>下一篇 我会讲解如何去调用管理员权限 以及 写连续对话的插件</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
      <category>nonebot教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 445.两数相加 II</title>
    <link href="/2023/07/03/leetcode445/"/>
    <url>/2023/07/03/leetcode445/</url>
    
    <content type="html"><![CDATA[<h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><h4 id="两数相加-II"><a href="#两数相加-II" class="headerlink" title="两数相加 II"></a><a href="https://leetcode.cn/problems/add-two-numbers-ii/">两数相加 II</a></h4><span id="more"></span><p>给你两个 非空 链表来代表两个非负整数。数字最高位位于链表开始位置。它们的每个节点只存储一位数字。将这两数相加会返回一个新的链表。</p><p>你可以假设除了数字 0 之外，这两个数字都不会以零开头。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：l1 = [7,2,4,3], l2 = [5,6,4]<br>输出：[7,8,0,7]<br><br>输入：l1 = [2,4,3], l2 = [5,6,4]<br>输出：[8,0,7]<br><br>输入：l1 = [0], l2 = [0]<br>输出：[0]<br><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题需要逆向运算，因此容易想到栈的性质<code>后进来的先出</code>，这和我之前20题的讲的栈是一样的,建立a和b两个栈</p><p><img src="https://s1.ax1x.com/2023/07/03/pCspfiT.png"></p><p>从示例1开始，依次把数字放进去</p><p><img src="https://s1.ax1x.com/2023/07/03/pCspqdx.png"></p><p>先弹出<code>3</code>和<code>4</code> 3+4=7 新链表第一哥节点为7</p><p><img src="https://s1.ax1x.com/2023/07/03/pCspvWD.png"></p><p>再到6+4=10 这时出现两位数了 我们要进1位 然后取除10的余数为当前的节点</p><p>因此节点第二位是0</p><p><img src="https://s1.ax1x.com/2023/07/03/pCs9FTP.png"></p><p>再到5+2=7 但别忘了之前的进位 所以是 5+2+1=8 第三个节点为8</p><p><img src="https://s1.ax1x.com/2023/07/03/pCs93kV.png"></p><p>这里b栈的数字已经全部用完了 这里取出来的数为0 所以是7+0 =7</p><p>最后一个节点为5</p><p><img src="https://s1.ax1x.com/2023/07/03/pCs9N6J.png"></p><p>到这里还没完 因为题目要求是翻转的链表 因此我们再把链表反转一下即可</p><p>那现在开始写代码吧</p><p>先把数字放进去栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a = []<br>b = []<br><span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:<br>    <span class="hljs-keyword">if</span> l1:<br>       a.append(l1.val)<br>       l1 = l1.<span class="hljs-built_in">next</span><br>            <br>    <span class="hljs-keyword">if</span> l2:<br>       b.append(l2.val)<br>       l2 = l2.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>然后写个条件循环</p><p>出栈并处理进位添加节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">m = n = ListNode(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">while</span> a <span class="hljs-keyword">or</span> b:<br>    <span class="hljs-keyword">if</span> a:<br>       k = a.pop()<br>    <span class="hljs-keyword">else</span>:<br>       k = <span class="hljs-number">0</span><br>            <br>    <span class="hljs-keyword">if</span> b:<br>        v = b.pop()<br>    <span class="hljs-keyword">else</span>:<br>        v = <span class="hljs-number">0</span><br>            <br>    s = (k+v+c)<br>    c = s // <span class="hljs-number">10</span><br>    m.<span class="hljs-built_in">next</span> = ListNode(s % <span class="hljs-number">10</span>)<br>    m = m.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><p>补位 (如果遍历完了 还有进位 则需补位)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> c:<br>   m.<span class="hljs-built_in">next</span> = ListNode(c)<br></code></pre></td></tr></table></figure><p>再写个反转链表的函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        prev, curr = <span class="hljs-literal">None</span>, head<br>        <span class="hljs-keyword">while</span> curr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">next</span> = curr.<span class="hljs-built_in">next</span><br>            curr.<span class="hljs-built_in">next</span> = prev<br>            prev = curr<br>            curr = <span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> prev<br></code></pre></td></tr></table></figure><p>大功告成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        prev, curr = <span class="hljs-literal">None</span>, head<br>        <span class="hljs-keyword">while</span> curr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">next</span> = curr.<span class="hljs-built_in">next</span><br>            curr.<span class="hljs-built_in">next</span> = prev<br>            prev = curr<br>            curr = <span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> prev<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        a = []<br>        b = []<br>        c = <span class="hljs-number">0</span><br>        m = n = ListNode(<span class="hljs-number">0</span>)<br>        k = <span class="hljs-number">0</span><br>        v = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:<br>            <span class="hljs-keyword">if</span> l1:<br>                a.append(l1.val)<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <br>            <span class="hljs-keyword">if</span> l2:<br>                b.append(l2.val)<br>                l2 = l2.<span class="hljs-built_in">next</span> <br>        <span class="hljs-keyword">while</span> a <span class="hljs-keyword">or</span> b:<br>            <span class="hljs-keyword">if</span> a:<br>                k = a.pop()<br>            <span class="hljs-keyword">else</span>:<br>                k = <span class="hljs-number">0</span><br>            <br>            <span class="hljs-keyword">if</span> b:<br>                v = b.pop()<br>            <span class="hljs-keyword">else</span>:<br>                v = <span class="hljs-number">0</span><br>            <br>            s = (k+v+c)<br>            c = s // <span class="hljs-number">10</span><br>            m.<span class="hljs-built_in">next</span> = ListNode(s % <span class="hljs-number">10</span>)<br>            m = m.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> c:<br>            m.<span class="hljs-built_in">next</span> = ListNode(c)<br>        <span class="hljs-keyword">return</span> self.reverseList(n.<span class="hljs-built_in">next</span>)<br></code></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>Python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 时间复杂度: O(max(n,m))</span><br><span class="hljs-comment">## 空间复杂度: O(m+n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:<br>        prev, curr = <span class="hljs-literal">None</span>, head<br>        <span class="hljs-keyword">while</span> curr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">next</span> = curr.<span class="hljs-built_in">next</span><br>            curr.<span class="hljs-built_in">next</span> = prev<br>            prev = curr<br>            curr = <span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> prev<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">addTwoNumbers</span>(<span class="hljs-params">self, l1: <span class="hljs-type">Optional</span>[ListNode], l2: <span class="hljs-type">Optional</span>[ListNode]</span>) -&gt; <span class="hljs-type">Optional</span>[ListNode]:<br>        a = []<br>        b = []<br>        c = <span class="hljs-number">0</span><br>        m = n = ListNode(<span class="hljs-number">0</span>)<br>        k = <span class="hljs-number">0</span><br>        v = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> l1 <span class="hljs-keyword">or</span> l2:<br>            <span class="hljs-keyword">if</span> l1:<br>                a.append(l1.val)<br>                l1 = l1.<span class="hljs-built_in">next</span><br>            <br>            <span class="hljs-keyword">if</span> l2:<br>                b.append(l2.val)<br>                l2 = l2.<span class="hljs-built_in">next</span> <br>        <span class="hljs-keyword">while</span> a <span class="hljs-keyword">or</span> b:<br>            <span class="hljs-keyword">if</span> a:<br>                k = a.pop()<br>            <span class="hljs-keyword">else</span>:<br>                k = <span class="hljs-number">0</span><br>            <br>            <span class="hljs-keyword">if</span> b:<br>                v = b.pop()<br>            <span class="hljs-keyword">else</span>:<br>                v = <span class="hljs-number">0</span><br>            <br>            s = (k+v+c)<br>            c = s // <span class="hljs-number">10</span><br>            m.<span class="hljs-built_in">next</span> = ListNode(s % <span class="hljs-number">10</span>)<br>            m = m.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> c:<br>            m.<span class="hljs-built_in">next</span> = ListNode(c)<br>        <span class="hljs-keyword">return</span> self.reverseList(n.<span class="hljs-built_in">next</span>)<br></code></pre></td></tr></table></figure><p>C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度: O(max(m,n))</span><br><span class="hljs-comment">// 空间复杂度: O(m+n)</span><br><span class="hljs-comment">// 本代码来自官方题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">ListNode* <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode* l1, ListNode* l2)</span> </span>&#123;<br>        stack&lt;<span class="hljs-type">int</span>&gt; s1, s2;<br>        <span class="hljs-keyword">while</span> (l1) &#123;<br>            s1.<span class="hljs-built_in">push</span>(l1 -&gt; val);<br>            l1 = l1 -&gt; next;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (l2) &#123;<br>            s2.<span class="hljs-built_in">push</span>(l2 -&gt; val);<br>            l2 = l2 -&gt; next;<br>        &#125;<br>        <span class="hljs-type">int</span> carry = <span class="hljs-number">0</span>;<br>        ListNode* ans = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">while</span> (!s1.<span class="hljs-built_in">empty</span>() <span class="hljs-keyword">or</span> !s2.<span class="hljs-built_in">empty</span>() <span class="hljs-keyword">or</span> carry != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> a = s1.<span class="hljs-built_in">empty</span>() ? <span class="hljs-number">0</span> : s1.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-type">int</span> b = s2.<span class="hljs-built_in">empty</span>() ? <span class="hljs-number">0</span> : s2.<span class="hljs-built_in">top</span>();<br>            <span class="hljs-keyword">if</span> (!s1.<span class="hljs-built_in">empty</span>()) s1.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (!s2.<span class="hljs-built_in">empty</span>()) s2.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">int</span> cur = a + b + carry;<br>            carry = cur / <span class="hljs-number">10</span>;<br>            cur %= <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">auto</span> curnode = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(cur);<br>            curnode -&gt; next = ans;<br>            ans = curnode;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>PHP</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 时间复杂度: O(max(m,n))</span><br><span class="hljs-comment">// 空间复杂度: O(m+n)</span><br><span class="hljs-comment">// 本代码来自 https://leetcode.cn/problems/add-two-numbers-ii/solution/phpjian-ji-jie-fa-by-mek1986/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a singly-linked list.</span><br><span class="hljs-comment"> * class ListNode &#123;</span><br><span class="hljs-comment"> *     public $val = 0;</span><br><span class="hljs-comment"> *     public $next = null;</span><br><span class="hljs-comment"> *     function __construct($val) &#123; $this-&gt;val = $val; &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ListNode $l1</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ListNode $l2</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> ListNode</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addTwoNumbers</span>(<span class="hljs-params"><span class="hljs-variable">$l1</span>, <span class="hljs-variable">$l2</span></span>) </span>&#123;<br>        <span class="hljs-variable">$num1</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//链表1表示的数字</span><br>        <span class="hljs-variable">$num2</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-comment">//链表2表示的数字</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$l1</span>!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-variable">$num1</span>.=<span class="hljs-variable">$l1</span>-&gt;val;<br>            <span class="hljs-variable">$l1</span>=<span class="hljs-variable">$l1</span>-&gt;next;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>(<span class="hljs-variable">$l2</span>!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-variable">$num2</span>.=<span class="hljs-variable">$l2</span>-&gt;val;<br>            <span class="hljs-variable">$l2</span>=<span class="hljs-variable">$l2</span>-&gt;next;<br>        &#125;<br><br>        <span class="hljs-variable">$sum</span>=<span class="hljs-title function_ invoke__">bcadd</span>(<span class="hljs-variable">$num1</span>,<span class="hljs-variable">$num2</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//求和,得到结果字符串</span><br>        <span class="hljs-variable">$newList</span>=<span class="hljs-literal">null</span>;<br>        <span class="hljs-variable">$len</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$sum</span>);        <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len</span>;<span class="hljs-variable">$i</span>++)&#123;<span class="hljs-comment">//循环结果字符串，就可以构建出链表</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$newList</span>==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-variable">$newList</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-variable">$sum</span>[<span class="hljs-variable">$i</span>]);<br>                <span class="hljs-variable">$head</span>=<span class="hljs-variable">$newList</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$newList</span>-&gt;next=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-variable">$sum</span>[<span class="hljs-variable">$i</span>]);<br>                <span class="hljs-variable">$newList</span>=<span class="hljs-variable">$newList</span>-&gt;next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$head</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="感谢收看"><a href="#感谢收看" class="headerlink" title="感谢收看"></a>感谢收看</h2><p><img src="https://s1.ax1x.com/2023/07/03/pCs9H1g.png"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 20.有效的括号</title>
    <link href="/2023/06/29/leetcode20/"/>
    <url>/2023/06/29/leetcode20/</url>
    
    <content type="html"><![CDATA[<h2 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h2><p>原题链接<a href="https://leetcode.cn/problems/valid-parentheses/">点我</a><br>给定一个只包括<code>&#39;(&#39;，&#39;)&#39;，&#39;&#123;&#39;，&#39;&#125;&#39;，&#39;[&#39;，&#39;]&#39;</code>的字符串 s ，判断字符串是否有效。</p><span id="more"></span><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>每个右括号都有一个对应的相同类型的左括号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：s = <span class="hljs-string">&quot;()&quot;</span><br>输出：<span class="hljs-literal">true</span><br><br>输入：s = <span class="hljs-string">&quot;()[]&#123;&#125;&quot;</span><br>输出：<span class="hljs-literal">true</span><br><br>输入：s = <span class="hljs-string">&quot;(]&quot;</span><br>输出：<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这里要用到栈的性质了</p><p>现在我们有一个数组</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwJpef.png"></p><p>但栈的性质是先进来的先出</p><p>有两种操作 进栈和出栈</p><p>也就是 我添加了数字<code>1,2,3</code> 我出栈是3 刚才进来的被踢出去了 所以这个也能拿来检验有效的括号</p><p>现在我们来模拟一下</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwJQkF.png"></p><p>添加一个左(小)括号 进栈</p><p>轮到右小括号的时候 这个时候我们出栈</p><p>如果是右小括号对应的左小括号 则是一个合理的括号</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwJR78.png"></p><p>再继续模拟一下<code>错误</code>情况</p><p>进来了一个左<code>小括号</code>和左<code>中括号</code></p><p><img src="https://s1.ax1x.com/2023/06/29/pCwJjNF.png"></p><p>这时候来一个右小括号<code>)</code></p><p>出栈</p><p>但发现是<code>[</code></p><p><img src="https://s1.ax1x.com/2023/06/29/pCwYS39.png"></p><p>所以这不是一个合理的括号</p><p>那接下来可以开始写代码了 先创建一个数组 和 字典 <code>(查询括号对应的另一半)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = []<br>i = &#123;<span class="hljs-string">&quot;)&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p>开始遍历for循环 左括号进栈 右括号出栈 以及判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">if</span> q <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>]: <span class="hljs-comment"># 左括号进栈</span><br>        a.append(q)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> a.pop() != i[q]: <span class="hljs-comment"># 如果出栈了不是对应的另一半</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-comment"># 否则返回True</span><br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/06/29/pCwYngA.png"></p><p>但题目数据范围还有1 也就意味着有 一个字符的测试示例</p><p>一个字符是构不成括号 因此要特殊判断</p><p>最终代码为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment">## 运用栈的性质</span><br><br>        res = [] <span class="hljs-comment"># 先创建一个栈 栈是先进来的先出</span><br><br>        i = &#123;<span class="hljs-string">&quot;)&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>&#125; <span class="hljs-comment"># 对应的位置</span><br><br>        <span class="hljs-comment">## 思路</span><br>        <span class="hljs-comment">## 左括号进栈</span><br>        <span class="hljs-comment">## 当遇到右括号时出栈 如果不一致则返回false</span><br><br>        <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> q <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>]: <span class="hljs-comment"># 如果是左括号 进栈</span><br>                res.append(q)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> res: <span class="hljs-comment"># 因为题目的数据包括一个字符 防止卡特别示例 例如 s = &quot;)&quot;</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> res.pop() != i[q]: <span class="hljs-comment"># 右括号出栈 并判断</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> res: <span class="hljs-comment"># 也是为了防止卡特别示例 s = &quot;[&quot;</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br></code></pre></td></tr></table></figure><p>但这个特殊判断我写的太麻烦 所以优化一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment">## 运用栈的性质</span><br><br>        res = [<span class="hljs-string">&quot;?&quot;</span>] <span class="hljs-comment"># 先创建一个栈 栈是先进来的先出</span><br><br>        i = &#123;<span class="hljs-string">&quot;)&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>&#125; <span class="hljs-comment"># 对应的位置</span><br><br>        <span class="hljs-comment">## 思路</span><br>        <span class="hljs-comment">## 左括号进栈</span><br>        <span class="hljs-comment">## 当遇到右括号时出栈 如果不一致则返回false</span><br><br>        <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> q <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>]: <span class="hljs-comment"># 如果是左括号 进栈</span><br>                res.append(q)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> res.pop() != i[q]: <span class="hljs-comment"># 右括号出栈 并判断</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) != <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br></code></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>Python3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 时间复杂度: O(n)</span><br><span class="hljs-comment">## 空间复杂度: O(n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">isValid</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:<br>        <span class="hljs-comment">## 运用栈的性质</span><br><br>        res = [<span class="hljs-string">&quot;?&quot;</span>] <span class="hljs-comment"># 先创建一个栈 栈是先进来的先出</span><br><br>        i = &#123;<span class="hljs-string">&quot;)&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;]&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;&#125;&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>&#125; <span class="hljs-comment"># 对应的位置</span><br><br>        <span class="hljs-comment">## 思路</span><br>        <span class="hljs-comment">## 左括号进栈</span><br>        <span class="hljs-comment">## 当遇到右括号时出栈 如果不一致则返回false</span><br><br>        <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> q <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;[&quot;</span>]: <span class="hljs-comment"># 如果是左括号 进栈</span><br>                res.append(q)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> res.pop() != i[q]: <span class="hljs-comment"># 右括号出栈 并判断</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(res) != <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <br></code></pre></td></tr></table></figure><p>C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度: O(n)</span><br><span class="hljs-comment">// 空间复杂度: O(n)</span><br><span class="hljs-comment">// 该代码来自官方题解</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isValid</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">char</span>&gt; pairs = &#123;<br>            &#123;<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-string">&#x27;(&#x27;</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;[&#x27;</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#x27;</span>&#125;<br>        &#125;;<br>        stack&lt;<span class="hljs-type">char</span>&gt; stk;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch: s) &#123;<br>            <span class="hljs-keyword">if</span> (pairs.<span class="hljs-built_in">count</span>(ch)) &#123;<br>                <span class="hljs-keyword">if</span> (stk.<span class="hljs-built_in">empty</span>() || stk.<span class="hljs-built_in">top</span>() != pairs[ch]) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>                stk.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                stk.<span class="hljs-built_in">push</span>(ch);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stk.<span class="hljs-built_in">empty</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>​    PHP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><br>    /**<br>     * @param String $s<br>     * @<span class="hljs-keyword">return</span> Boolean<br>     */<br>    function isValid($s) &#123;<br>        <span class="hljs-keyword">if</span> (strlen($s)==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;&#125;<br>        $a = array(<span class="hljs-string">&quot;?&quot;</span>);<br><br>        $b = array();<br>        $b[<span class="hljs-string">&quot;)&quot;</span>] = <span class="hljs-string">&quot;(&quot;</span>;<br>        $b[<span class="hljs-string">&quot;&#125;&quot;</span>] = <span class="hljs-string">&quot;&#123;&quot;</span>;<br>        $b[<span class="hljs-string">&quot;]&quot;</span>] = <span class="hljs-string">&quot;[&quot;</span>;<br>        <br>        <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; strlen($s); $i++)&#123;<br>            <span class="hljs-keyword">if</span> ($s[$i] == <span class="hljs-string">&quot;&#123;&quot;</span> || $s[$i] == <span class="hljs-string">&quot;(&quot;</span> || $s[$i] == <span class="hljs-string">&quot;[&quot;</span>)&#123;<br>                array_push($a,$s[$i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(array_pop($a)!= $b[$s[$i]])&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count($a) == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="感谢观看"><a href="#感谢观看" class="headerlink" title="感谢观看"></a>感谢观看</h2><p><img src="https://s1.ax1x.com/2023/06/29/pCwtdRH.png"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nonebot2 手把手教程 一配置环境</title>
    <link href="/2023/06/29/nonebot_teach_2/"/>
    <url>/2023/06/29/nonebot_teach_2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文开始介绍如何配置编程环境 关于<code>gocq</code>和<code>python</code>安装</p><span id="more"></span><p>可以看<a href="https://blog.bingyue.top/2023/06/17/nonebot_teach_1/">第零篇</a></p><h2 id="安装Vscode"><a href="#安装Vscode" class="headerlink" title="安装Vscode"></a>安装Vscode</h2><p>打开官网<a href="https://code.visualstudio.com/">Vsocode</a></p><p>点击下面的download按钮</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwMK8x.png" alt="dj"></p><p>等待下载完成….</p><p>双击打开安装包 按照提示进行下一步的安装</p><p>大概页面如下</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwM3rD.png"></p><h2 id="在vscode里配置python"><a href="#在vscode里配置python" class="headerlink" title="在vscode里配置python"></a>在vscode里配置python</h2><p>点击正方体的按钮 单击<code>搜索框</code>输入<code>python</code>进行安装</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwM1KO.png"></p><p>tips:<code>我这里已经安装了 这里应该要点install按钮</code></p><p>在你的桌面上创建一个py文件 用vscode打开试一下</p><p>如果有自动补全 说明已经成功了</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwMUPI.png"></p><p>这个时候可以挂起来vscode了</p><h2 id="下载Nonebot2"><a href="#下载Nonebot2" class="headerlink" title="下载Nonebot2"></a>下载Nonebot2</h2><p>点你左上角的Windows 右键打开powershell<code>admin</code>的</p><p>按如下输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br>pip install nb-cli<br>pip install nonebot2<br>nb driver install nonebot2[fastapi]<br>nb adapter install nonebot-adapter-onebot<br></code></pre></td></tr></table></figure><p>恭喜你 nb已经安装到你电脑上了</p><p>如果在下方安装出错 可以联系作者</p><h2 id="创建Nonebot2项目"><a href="#创建Nonebot2项目" class="headerlink" title="创建Nonebot2项目"></a>创建Nonebot2项目</h2><p>这个时候切记不要关闭你的<code>powershell</code></p><p>输入一句<code>nb</code>然后回车</p><p>选择创建项目</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdnQH.jpg" alt="创建项目"></p><p>回车</p><p><strong>上下选择 回车确认</strong> 选择<code>开发者</code></p><p><img src="https://s1.ax1x.com/2023/03/26/pprdlwt.jpg" alt="选择开发者"></p><p>输入名字，回车</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdGY8.jpg" alt="输入名字，回车"></p><p><strong>注意：上下切换选项目 空格选择 回车确认</strong> 一定要记住</p><p>选择<code>fastapi</code></p><p><img src="https://s1.ax1x.com/2023/03/26/pprd0wq.jpg" alt="fastapi"></p><p>选择<code>onebot v11</code>协议 </p><p><img src="https://s1.ax1x.com/2023/03/26/pprdcpF.jpg" alt="onebot"></p><p>选择在<code>scr</code>目录下</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdRX9.jpg" alt="scr"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">立即安装依赖 输入y<br>创建虚拟环境 输入n<br></code></pre></td></tr></table></figure><p>接下来 选择echo插件</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdTfO.jpg" alt="echo"></p><p>回车</p><p>大功告成</p><h2 id="运行Nonebot2"><a href="#运行Nonebot2" class="headerlink" title="运行Nonebot2"></a>运行Nonebot2</h2><p>先打开你的gocq <del>此处省略</del></p><p>vscode点右上角的终端</p><p><img src="https://s1.ax1x.com/2023/06/29/pCwMLJ1.png"> </p><p>请确保是在该目录下的文件夹</p><p>那如何进入文件夹和退出文件夹？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 以下是shell的命令解释</span><br><span class="hljs-built_in">cd</span> xxx <span class="hljs-comment">## 代表进入xxx文件夹</span><br><span class="hljs-built_in">cd</span> ../ <span class="hljs-comment">## 代表退出当前文件夹</span><br><span class="hljs-built_in">ls</span> <span class="hljs-comment"># 列举当前文件夹的内容</span><br></code></pre></td></tr></table></figure><p>在终端输入<code>nb run</code></p><p>如果成功会出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs bash">06-29 00:33:29 [SUCCESS] nonebot | NoneBot is initializing...<br>06-29 00:33:29 [INFO] nonebot | Current Env: dev<br>06-29 00:33:29 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;admin&quot;</span> from <span class="hljs-string">&quot;plugins.admin&quot;</span><br>06-29 00:33:29 [ERROR] config | 当前未配置用户名和密码,请到admin.py配置！！！<br>06-29 00:33:30 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;group_1&quot;</span> from <span class="hljs-string">&quot;plugins.group_1&quot;</span><br>06-29 00:33:30 [SUCCESS] trun_on | 兽云nonebot2 插件启动成功<br>06-29 00:33:30 [SUCCESS] trun_on | 当前版本为0.1 正式版<br>06-29 00:33:30 [SUCCESS] trun_on | 如有问题可以来https://github.com/bingqiu456/shouyun 来反馈<br>06-29 00:33:30 [WARNING] trun_on | 正在检查更新，请勿退出<br>06-29 00:33:31 [WARNING] trun_on | 检测到新版本:1.1<br>更新日志<br>2023-06-17<br>本次更新内容较多，可能比较费时间<br>1.新增心跳开关（config.py）<br>2.修复了群开关无反应<br>3.修复了登录验证码bug<br>06-29 00:33:31 [SUCCESS] trun_on |  ╰(*°▽*)╯ 祝你使用愉快<br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;trun_on&quot;</span> from <span class="hljs-string">&quot;plugins.trun_on&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;yiyan&quot;</span> from <span class="hljs-string">&quot;plugins.yiyan&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;login_token&quot;</span> from <span class="hljs-string">&quot;plugins.login_token&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;image_random&quot;</span> from <span class="hljs-string">&quot;plugins.image_random&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;reboot&quot;</span> from <span class="hljs-string">&quot;plugins.reboot&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;logo_acct&quot;</span> from <span class="hljs-string">&quot;plugins.logo_acct&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;image_download&quot;</span> from <span class="hljs-string">&quot;plugins.image_download&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;image_check&quot;</span> from <span class="hljs-string">&quot;plugins.image_check&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;about&quot;</span> from <span class="hljs-string">&quot;plugins.about&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;config&quot;</span> from <span class="hljs-string">&quot;plugins.config&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;accot&quot;</span> from <span class="hljs-string">&quot;plugins.accot&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;login&quot;</span> from <span class="hljs-string">&quot;plugins.login&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;image_updata&quot;</span> from <span class="hljs-string">&quot;plugins.image_updata&quot;</span><br>06-29 00:33:31 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;lingp&quot;</span> from <span class="hljs-string">&quot;plugins.lingp&quot;</span><br>06-29 00:33:32 [SUCCESS] xint | 心跳包未开启<br>06-29 00:33:32 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;xint&quot;</span> from <span class="hljs-string">&quot;plugins.xint&quot;</span><br>06-29 00:33:32 [SUCCESS] nonebot | Succeeded to load plugin <span class="hljs-string">&quot;menu&quot;</span> from <span class="hljs-string">&quot;plugins.menu&quot;</span><br>06-29 00:33:32 [SUCCESS] nonebot | Running NoneBot...<br>06-29 00:33:33 [INFO] uvicorn | Started server process [2976]<br>06-29 00:33:33 [INFO] uvicorn | Waiting <span class="hljs-keyword">for</span> application startup.<br>06-29 00:33:33 [INFO] nonebot_plugin_apscheduler | Scheduler Started<br>06-29 00:33:33 [INFO] uvicorn | Application startup complete.<br>06-29 00:33:33 [INFO] uvicorn | Uvicorn running on http://0.0.0.0:20000 (Press CTRL+C to quit)<br></code></pre></td></tr></table></figure><p>出现<code>06-29 00:33:33 [INFO] uvicorn | Uvicorn running on http://0.0.0.0:20000 (Press CTRL+C to quit)</code> 代表nb启动成功</p><h2 id="ModuleNotFoundError-No-module-named-‘nonebot’"><a href="#ModuleNotFoundError-No-module-named-‘nonebot’" class="headerlink" title="ModuleNotFoundError: No module named ‘nonebot’"></a>ModuleNotFoundError: No module named ‘nonebot’</h2><p>这说明你的nb2没有安装成功</p><h2 id="通常每个套-接字地址-协议-网络地址-端口-只允许使用一次。"><a href="#通常每个套-接字地址-协议-网络地址-端口-只允许使用一次。" class="headerlink" title="通常每个套 接字地址(协议/网络地址/端口)只允许使用一次。"></a>通常每个套 接字地址(协议/网络地址/端口)只允许使用一次。</h2><p>这说明你的端口发生冲突 检查你是不是重复启动nb 或者有其他项目占用了该端口号</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>下一期 我们来编写一个 <code>随机人生</code>吧</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
      <category>nonebot教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nonebot2 手把手教程 前言</title>
    <link href="/2023/06/17/nonebot_teach_1/"/>
    <url>/2023/06/17/nonebot_teach_1/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天是六月十七号，在未来会迎来暑假，所以本人在暑假的时候会开一个专栏，去专门讲解<code>nonebot2的插件编写</code></p><p>将在6月27号开始连载第一篇 专门为python0基础的小白提供环境</p><span id="more"></span><p>先学会配置go-cqhttp and python</p><p><a href="https://blog.bingyue.top/2022/10/03/cq_1/">go-cqhttp教程</a></p><p><a href="https://blog.bingyue.top/2022/10/03/python_start/">python教程</a></p><h2 id="请教问题"><a href="#请教问题" class="headerlink" title="请教问题"></a>请教问题</h2><p>当然 如果你在配置过程中出现了问题 你可以寻求身边的朋友</p><p>以下是三种联系方式</p><p>1.去博客页面加我qq</p><p>2.去<code>baidu</code>或者<code>google</code></p><p>3.去问身边学py的</p><h2 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h2><p>第一篇 配置vscode和py开发环境</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
      <category>nonebot教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
      <tag>编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>兽云1.0 nonebot2插件发布</title>
    <link href="/2023/05/13/shouyun%20zs/"/>
    <url>/2023/05/13/shouyun%20zs/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天，我们发布了兽云nonebot2插件，本插件已同步到<a href="https://v2.nonebot.dev/">nonebot官方</a></p><span id="more"></span><p>让我们来看看吧</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><hr><p align="center">  <a href="https://v2.nonebot.dev/"><img src="https://s1.ax1x.com/2023/05/13/p969OMV.png" alt="nonebot"></a></p><div align="center"></div><center><h2>🍁Nonebot-Bot-shouyun🍁<h2><center><center>⭐轻量 高级 高效率⭐<center><center>⭐支持各种各样的功能⭐<center><center>⭐目前版本v1.0正式版⭐<center><center>⭐有问题请发iss⭐<center><h2 id="入门使用"><a href="#入门使用" class="headerlink" title="入门使用"></a>入门使用</h2><p>先在你的浏览器打开<a href="https://github.com/bingqiu456/shouyun/releases">这个页面</a></p><p>下载最新的<code>v1.0</code>版本</p><p>解压</p><p><img src="https://s1.ax1x.com/2023/05/13/p96Cuid.png"></p><p>打开plugins文件夹</p><p><img src="https://s1.ax1x.com/2023/05/13/p96CKJA.png"></p><p>编辑<code>admin.py</code></p><p>输入你的主账号 用户名密码 以及审核群等配置…</p><p><img src="https://s1.ax1x.com/2023/05/13/p96CQzt.png"></p><p>完事之后保存退出</p><p>这个时候返回到主文件</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>windows用户请直接点击<code>点我更新.cmd</code> 等待更新完毕</p><p>再点击<code>点我启动.cmd</code></p><p><code>注：目前重启机器功能仅支持Windows</code></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>返回主文件夹 <code>在当前目录</code>打开你的终端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python updata.py<br>python3 updata.py<br></code></pre></td></tr></table></figure><p>先更新 再启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nb run<br></code></pre></td></tr></table></figure><h2 id="目前已支持的功能"><a href="#目前已支持的功能" class="headerlink" title="目前已支持的功能"></a>目前已支持的功能</h2><ul><li>账号功能,功能操作,令牌功能,系统设置 🌙</li><li>账号登录,账号注册,获取验证码,获取(上传)头像,查询资料+id 🌙🌙</li><li>随机图片,图片下载,图片上传 🌙🌙🌙</li><li>启动停用令牌,启动key模式,获取修改登录令牌,令牌列表,申请令牌,修改令牌权限 🌙🌙🌙🌙</li><li>关于作者,检查更新,心跳包,重启机器人 🌙🌙🌙🌙🌙</li></ul><h2 id="未来适配"><a href="#未来适配" class="headerlink" title="未来适配"></a>未来适配</h2><p>切换账号 令牌模式切换 ❌</p><h2 id="开源声明"><a href="#开源声明" class="headerlink" title="开源声明"></a>开源声明</h2><p>如果你的项目使用我的代码 请注明本项目出处 可用于交流学习 请勿用于贩卖 同时祝你使用愉快</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>QQ:35***19417</p><p>github:bingqiu456</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随身wifi玩机篇2 刷机</title>
    <link href="/2023/04/28/wifi_td_2/"/>
    <url>/2023/04/28/wifi_td_2/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本期是随身wifi的玩机篇2 是刷机+救砖 备份篇可以看<a href="https://blog.bingyue.top/2023/04/22/wifi_td_1/">这里</a></p><p>总体思路</p><span id="more"></span><ul><li>确定板子的型号</li><li>找到合适的型号的刷机包 <code>openwrt</code> <code>debian</code> <code>other</code></li><li>刷入</li><li>如果砖了请看后面的救砖部分</li></ul><h2 id="确认板子型号"><a href="#确认板子型号" class="headerlink" title="确认板子型号"></a>确认板子型号</h2><p>把棒子烦过来 你会看到有两颗螺丝 这个时候我们打开螺丝 <code>稍微</code>有力就能<code>撬开</code>棒子</p><p><img src="https://s1.ax1x.com/2023/04/28/p91FEcT.png"></p><p>​        博主的型号为<code>ufi003mb</code> 但后面发现可以刷 <code>ufi001b的包</code></p><p>目前支持的型号如下</p><ul><li>ufi003</li><li>ufi001c</li><li>uz801</li><li>ufi001b</li><li>sp970</li><li><code>ufi003mb==ufi001b</code> </li></ul><h2 id="下载合适的线刷包-并刷入"><a href="#下载合适的线刷包-并刷入" class="headerlink" title="下载合适的线刷包 并刷入"></a>下载合适的线刷包 并刷入</h2><p><a href="https://www.123pan.com/s/XwVDVv-WICn3">下载链接</a></p><p>我这里以ufi001b为示例</p><p><img src="https://s1.ax1x.com/2023/04/28/p91F4Cq.png"></p><p>打开之前下载好的adb工具</p><p>插入棒子 等待设备连接</p><p><img src="https://s1.ax1x.com/2023/04/28/p91A06f.png"></p><p>连接adb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">reboot bootloader<br></code></pre></td></tr></table></figure><p>重启到fastboot</p><p>返回下载好的刷机包并解压</p><p><img src="https://s1.ax1x.com/2023/04/28/p91A2hn.png"></p><p>打开<code>flash.bat</code>一路回车</p><p><img src="https://s1.ax1x.com/2023/04/28/p91AhcV.png"></p><p><img src="https://s1.ax1x.com/2023/04/28/p91Af10.png"></p><p>然后你的棒子会重启 这个时候去连接棒子上的wifi</p><p>去你的电脑wifi列表 找到棒子的热点 一般名字为<code>handsommod</code></p><p><img src="https://s1.ax1x.com/2023/04/28/p91AoBF.png"></p><p>连接之后 打开浏览器 输入<strong>192.168.1.1</strong></p><p>直接点登录就行</p><p>这样就刷好了 自己玩吧</p><p><img src="https://s1.ax1x.com/2023/04/28/p91AvjK.png"></p><h2 id="救砖"><a href="#救砖" class="headerlink" title="救砖"></a>救砖</h2><p>如果你一不小心刷成砖了 我们可以通过按按钮连接9008</p><p>按住该按钮 然后插入棒子 将会进入到9008</p><p><img src="https://s1.ax1x.com/2023/04/28/p91EVjf.png"></p><p>进入9008之后 就可以使用miko刷机了 选择你备份好的官方包</p><p><img src="https://s1.ax1x.com/2023/04/28/p91EYuT.png"></p><p><img src="https://s1.ax1x.com/2023/04/28/p91EaE4.png"></p><p>恭喜你 回到官方了</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>下一篇 在debian系统里安装面板</p><p>本次的刷机篇有点短 基本上不难刷 后面会带来如何挂nonebot2教程</p><p>感谢收看</p>]]></content>
    
    
    <categories>
      
      <category>随身wifi</category>
      
      <category>刷机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随身wifi</tag>
      
      <tag>9008</tag>
      
      <tag>openwrt</tag>
      
      <tag>debian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随身wifi玩机篇1 备份分区</title>
    <link href="/2023/04/22/wifi_td_1/"/>
    <url>/2023/04/22/wifi_td_1/</url>
    
    <content type="html"><![CDATA[<h2 id="大家好"><a href="#大家好" class="headerlink" title="大家好"></a>大家好</h2><p>今天我要刷一个随身WiFi的东西 具体的话可以看这里 感谢<strong>酷安</strong>的各位大佬的整合</p><p>本文章已授权 会做一些修改</p><span id="more"></span><p><a href="https://www.coolapk.com/feed/45320764">原文</a></p><p><a href="https://www.123pan.com/s/Dpq0Vv-XAUHd.html">工具链接</a> 提取码<code>V23y</code></p><p>本篇主要讲的是备份分区</p><h2 id="安装驱动-9008工具"><a href="#安装驱动-9008工具" class="headerlink" title="安装驱动 9008工具"></a>安装驱动 9008工具</h2><p>先从链接中下载9008驱动</p><p><img src="https://s1.ax1x.com/2023/04/21/p9EbUW4.png"></p><p>以及上面的 9008工具</p><p>然后解压</p><p>先安装驱动 由于我这里安装了 所以本步略过</p><p>打开你下载的<code>[9008全量备份工具]MiKo_Loder Pro</code> 的文件</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VFkOf.png"></p><p>先打开miko.exe 安装好工具 </p><p>在miko的安装目录把loader.exe 复制进去 下次用loader.exe打开</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VFMpn.png"></p><h2 id="备份全分区"><a href="#备份全分区" class="headerlink" title="备份全分区"></a>备份全分区</h2><p><a href="http://cdn.bingyue.top/adb.zip">下载adb工具包</a></p><p>然后在本地目录打开powershell</p><p>把棒子插到电脑usb接口</p><p>输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot edl<br></code></pre></td></tr></table></figure><p>如果棒子变黑了 说明已经进入到了9008模式</p><p>现在打开我们刚才的miko工具</p><p>按下图操作</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VF1XV.png"></p><p>双击下面的</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VAUQ1.png"></p><p>选择一个路径 并把bin文件输入一个名字</p><p>点击<code>Read Full image</code>的按钮 开始备份</p><p>下面的进度条会动 如上图所示</p><p>备份好了重插一下棒子 将会重启</p><h2 id="提取boot和基带"><a href="#提取boot和基带" class="headerlink" title="提取boot和基带"></a>提取boot和基带</h2><p>返回我们下载的<code>[9008分区操作工具]Qualcomm Premium Tool V2.4</code></p><p><img src="https://s1.ax1x.com/2023/04/22/p9VESkF.png"></p><p>注意音量</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEpY4.png"></p><p>点击<code>getkey</code> 然后保存key文件到你的路径中 打开工具<code>Qualcomm Premium Tool.exe</code></p><p>找到左上角的 help-&gt;activate 打开刚才保存的key 文件 完成激活</p><p>先把棒子进入9008模式 进入方法请看上一步</p><p>扫描分区</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEPp9.png"></p><p>如果不出意外这里会出现一个列表</p><p><strong>选择boot分区</strong> 和下面三个分区</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEF61.png"></p><p>注意 这里的中间灰色框要双击</p><p>等待备份….</p><p>这里我们的基带就备份好了</p><p>去到刚才备份的目录下 可以给boot加个img</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEufH.png"></p><h2 id="Root-远程控制"><a href="#Root-远程控制" class="headerlink" title="Root 远程控制"></a>Root 远程控制</h2><p><img src="https://s1.ax1x.com/2023/04/22/p9VA2QI.png"></p><p>下载这两个文件</p><p>解压<code>ARDC和安卓apk</code> 打开ardc 然后插入棒子 将会自动连接</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEq4e.png"></p><p><img src="https://s1.ax1x.com/2023/04/22/p9VVnbV.png"></p><p><img src="https://pic1.imgdb.cn/item/64433b640d2dde577793b140.png"></p><p><img src="https://pic1.imgdb.cn/item/64433b7f0d2dde577793e445.png"></p><p>把boot.img拖入进去 在桌面打开magisk app</p><p><img src="https://pic1.imgdb.cn/item/64433c8a0d2dde577794f148.png"></p><p>选择下一步 修补文件选择download目录下的boot.img</p><p><img src="https://pic1.imgdb.cn/item/64433cb70d2dde5777951d63.png"></p><p><img src="https://pic1.imgdb.cn/item/64433cb70d2dde5777951d84.png"></p><p><img src="https://pic1.imgdb.cn/item/64433cb70d2dde5777951d9c.png"></p><p>选择标准的安卓方式 点击开始刷入 等待结束</p><p>打开es管理器</p><p>打开上面的&lt;&lt;</p><p><img src="https://pic1.imgdb.cn/item/64433d260d2dde5777958c49.png"></p><p>在es管理器里打开download 文件夹</p><p>找到magisk的boot 点击cmd按钮 输入如下</p><p>这里的xxx.img 是magisk修改好的boot的名字</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb pull /sdcard/Download/xxx.img ./<br></code></pre></td></tr></table></figure><p>这个时候去ardc的文件目录下 找到magisk.img</p><p>cmd再次输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot bootloader<br>fastboot flash boot xxxx.img<br></code></pre></td></tr></table></figure><p>注意 xxxx.img 是magisk修改好的boot 你可以直接拖入cmd里</p><p>这样就刷好root了 重启一下</p><p>连接adb 输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell<br>su root<br>setprop sys.usb.config diag,adb <br></code></pre></td></tr></table></figure><p>接下来可以备份qcn了</p><h2 id="备份qcn"><a href="#备份qcn" class="headerlink" title="备份qcn"></a>备份qcn</h2><p><img src="https://s1.ax1x.com/2023/04/22/p9VE8nP.png"></p><p>下载这个 工具<code>qpst</code></p><p>解压安装</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEW9J.png"></p><p>选择端口</p><p><img src="https://s1.ax1x.com/2023/04/22/p9VEhcR.png"></p><p>备份好了</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文使用的随身wifi型号是9600(uf6-7)</p><p>购买链接-&gt;<a href="https://m.tb.cn/h.UGUJZOr?tk=0rHcdO86bCf">1</a></p>]]></content>
    
    
    <categories>
      
      <category>随身wifi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>随身wifi</tag>
      
      <tag>9008</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>兽云nonebot2配置教程</title>
    <link href="/2023/04/16/shouyun_strat/"/>
    <url>/2023/04/16/shouyun_strat/</url>
    
    <content type="html"><![CDATA[<p align="center">  <a href="https://v2.nonebot.dev/"><img src="https://v2.nonebot.dev/logo.png" width="200" height="200" alt="nonebot"></a></p><div align="center"></div><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="Nonebot-shouyun"><a href="#Nonebot-shouyun" class="headerlink" title="Nonebot shouyun"></a>Nonebot shouyun</h2><p>本插件是由<code>bingyue</code>自己开发的</p><span id="more"></span><p>目前支持的功能不多 未来会更新的</p><h2 id="2023-04-16-更新"><a href="#2023-04-16-更新" class="headerlink" title="2023-04-16 更新"></a>2023-04-16 更新</h2><p>1.随机头像</p><p>2.获取头像</p><p>3.随机图片</p><p><del>令牌功能未上线</del></p><h2 id="2023-04-28更新"><a href="#2023-04-28更新" class="headerlink" title="2023-04-28更新"></a>2023-04-28更新</h2><p>1.新增心跳包功能 时间请到<code>admin.py</code> 设置</p><p>2.新增图片下载功能</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>打开你的浏览器 直接点击<a href="https://github.com/bingqiu456/shouyun/releases">该链接</a></p><p>下载最新版0.4beta</p><p>请确保你电脑上有nonebot环境 没有环境可以去我<a href="https://blog.bingyue.top/2023/03/26/nonebot2_cr/">博客</a></p><p>下载之后 直接解压</p><p><img src="https://s1.ax1x.com/2023/04/15/p9Svz59.png"></p><p>先更新一下</p><p><img src="https://s1.ax1x.com/2023/04/15/p9SxMxP.png"></p><p>等待完成</p><p>完成之后关闭cmd</p><p>返回主页面 打开<code>点我启动.cmd</code></p><p><img src="https://s1.ax1x.com/2023/04/15/p9Sx3qS.png"></p><p>如果有更新请及时更新</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>请确保你有python+nonebot</p><p>解压之后 在该文件夹打开终端</p><p>输入如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 updata.py<br><span class="hljs-comment"># 上面那个如果无效就试试下面的</span><br>python updata.py<br></code></pre></td></tr></table></figure><p>更新好之后</p><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nb run<br></code></pre></td></tr></table></figure><p>然后回车 启动</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>先打开这个文件</p><p><img src="https://s1.ax1x.com/2023/04/15/p9SxsZF.png"></p><p>然后按我说的去改</p><p><img src="https://s1.ax1x.com/2023/04/15/p9Sx4sK.png"></p><p>保存</p><p>再次回到主页面</p><p>打开plugins文件夹</p><p><img src="https://s1.ax1x.com/2023/04/15/p9SxoZD.png"></p><p><img src="https://s1.ax1x.com/2023/05/02/p9GG5mF.png"></p><p><img src="https://s1.ax1x.com/2023/05/02/p9GGhOU.png"></p><p>输入你的用户名和密码和心跳包</p><p>然后保存</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>开机后 对机器人回复<code>兽云菜单</code>二字即可！</p><p>兽云菜单</p><ul><li>账号功能 (如登录账号 修改资料 上传头像 等…)</li><li>功能操作 (图片下载 图片列表获取 随机图片 等…)</li><li>令牌功能  (申请令牌 撤销令牌 等…)</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文写于<code>2023-04-15</code> 最新更新于<code>2023-05-02 00:32:45</code></p><p>如有bug可以点击这里<a href="https://github.com/bingqiu456/shouyun/issues">反馈</a></p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 17.电话号码的字母组合</title>
    <link href="/2023/04/09/leetcode17/"/>
    <url>/2023/04/09/leetcode17/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h4><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。</p><span id="more"></span><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：digits = <span class="hljs-string">&quot;23&quot;</span><br>输出：[<span class="hljs-string">&quot;ad&quot;</span>,<span class="hljs-string">&quot;ae&quot;</span>,<span class="hljs-string">&quot;af&quot;</span>,<span class="hljs-string">&quot;bd&quot;</span>,<span class="hljs-string">&quot;be&quot;</span>,<span class="hljs-string">&quot;bf&quot;</span>,<span class="hljs-string">&quot;cd&quot;</span>,<span class="hljs-string">&quot;ce&quot;</span>,<span class="hljs-string">&quot;cf&quot;</span>]<br><br>输入：digits = <span class="hljs-string">&quot;&quot;</span><br>输出：[]<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题是一道非常经典的回溯题</p><p>如果你对回溯没有任何学习过 你可以按照我说的做</p><p>首先我们看第一个示例</p><p>是两个数字<code>2和3</code> 我们可以在上面图片找到对应字母<code>abc</code>和<code>def</code></p><p>这样的话我们可以写一个双for循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;abc&quot;</span>:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;def&quot;</span>:<br>        <span class="hljs-built_in">print</span>(i+j)<br></code></pre></td></tr></table></figure><p>那你可以说<code>直接手写一堆for不就行了？</code> <code>但是</code>当数字逐渐增多的时候 或者<code>不能知道下一个数是什么</code></p><p>可以转化成二叉树问题</p><p><img src="https://s1.ax1x.com/2023/04/08/ppHPyY8.png"></p><p>这个时候就可以用到我们前面学的<code>递归+深度优先搜索</code>了 通过递归可以实现多重循环</p><p>于是我们可以这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,ans</span>): <span class="hljs-comment"># i是当前的字母 ans是答案</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        ans+=i <span class="hljs-comment"># 添加当前枚举的答案</span><br>        dfs(i+<span class="hljs-number">1</span>,ans) <span class="hljs-comment"># 继续深入 达到最底</span><br>        ans-=i <span class="hljs-comment"># 回溯 还原之前的答案 这样做是取下一个字母 如果不还原答案 会出现重复</span><br></code></pre></td></tr></table></figure><p>那么递归的边界是什么？</p><p><code>当前答案长度==字母串的长度时</code>这个时候就可以<code>return</code>了</p><p>总之回溯就是暴力算法 相当于试探 当试探完之后会撤销选择 继续下一次选择</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">num = [<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>]<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">letterCombinations</span>(<span class="hljs-params">self, digits: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> digits: <span class="hljs-keyword">return</span> []<br>        ans = []<br>        k = <span class="hljs-built_in">len</span>(digits)<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,temp</span>):<br>            <span class="hljs-keyword">if</span> k == <span class="hljs-built_in">len</span>(temp):<br>                ans.append(<span class="hljs-string">&quot;&quot;</span>.join(temp))<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> num[<span class="hljs-built_in">int</span>(digits[i])]:<br>                temp.append(a)<br>                dfs(i+<span class="hljs-number">1</span>,temp)<br>                temp.pop()<br>        dfs(<span class="hljs-number">0</span>,[])<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 转载的代码</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string s;<br>    vector&lt;string&gt; result;<br>    <span class="hljs-comment">//设置一个字符串数组进行映射</span><br>    vector&lt;string&gt; letterMap = &#123;<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>, <span class="hljs-string">&quot;mno&quot;</span>, <span class="hljs-string">&quot;pqrs&quot;</span>, <span class="hljs-string">&quot;tuv&quot;</span>, <span class="hljs-string">&quot;wxyz&quot;</span>&#125;;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">backtracking</span><span class="hljs-params">(string &amp;digits, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index == digits.<span class="hljs-built_in">size</span>()) &#123;<br>            result.<span class="hljs-built_in">emplace_back</span>(s);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> digit = digits[index] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        string letters = letterMap[digit];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; letters.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>            s.<span class="hljs-built_in">push_back</span>(letters[i]);<br>            <span class="hljs-built_in">backtracking</span>(digits, index + <span class="hljs-number">1</span>);<br>            s.<span class="hljs-built_in">pop_back</span>();<br>        &#125; <br>    &#125;<br>    <span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">letterCombinations</span><span class="hljs-params">(string digits)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (digits.<span class="hljs-built_in">size</span>() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> result;<br>        <span class="hljs-built_in">backtracking</span>(digits, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="感谢收看"><a href="#感谢收看" class="headerlink" title="感谢收看"></a>感谢收看</h2><p><img src="https://s1.ax1x.com/2023/04/08/ppHitA0.png"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>回溯</tag>
      
      <tag>深度优先搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1014.最佳观光组合</title>
    <link href="/2023/04/08/leetcode1014/"/>
    <url>/2023/04/08/leetcode1014/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="1014-最佳观光组合"><a href="#1014-最佳观光组合" class="headerlink" title="1014. 最佳观光组合"></a><a href="https://leetcode.cn/problems/best-sightseeing-pair/">1014. 最佳观光组合</a></h4><p>给你一个正整数数组 values，其中 values[i] 表示第 i 个观光景点的评分，并且两个景点 i 和 j 之间的 距离 为 j - i。</p><span id="more"></span><p>一对景点（i &lt; j）组成的观光组合的得分为 values[i] + values[j] + i - j ，也就是景点的评分之和 减去 它们两者之间的距离。</p><p>返回一对观光景点能取得的最高分。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：values = [8,1,5,2,6]<br>输出：11<br>解释：i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>本题和股票买卖1类似 具体可以参考股票1的代码</p><p><del>就是加了个ij上去而已</del></p><p>因此我们可以用两个变量去维护状态</p><p><code>一个更新目前的最大值</code></p><p><code>一个更新values[i]+i</code></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间复杂度：O(n)</span><br><span class="hljs-comment"># 空间复杂度: O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxScoreSightseeingPair</span>(<span class="hljs-params">self, values: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        a,b = <span class="hljs-number">0</span>,values[<span class="hljs-number">0</span>]+<span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(values)):<br>            a = <span class="hljs-built_in">max</span>(a,b+values[i]-i)<br>            b = <span class="hljs-built_in">max</span>(b,values[i]+i)<br>        <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度：O(n)</span><br><span class="hljs-comment">// 空间复杂度: O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxScoreSightseeingPair</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; values)</span> </span>&#123;<br>        <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = values[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> w = <span class="hljs-number">1</span>; w &lt; values.<span class="hljs-built_in">size</span>(); w++)&#123;<br>            i = <span class="hljs-built_in">max</span>(i,j+values[w]-w);<br>            j = <span class="hljs-built_in">max</span>(j,values[w]+w);<br>        &#125;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/04/08/pp7QoC9.png"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 53.最大子数组和题解</title>
    <link href="/2023/04/05/leetcode53/"/>
    <url>/2023/04/05/leetcode53/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目:<a href="https://leetcode.cn/problems/maximum-subarray/">最大子数组和</a></p><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><span id="more"></span><p><strong>子数组</strong> 是数组中的一个连续部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">输入：nums = [-<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">4</span>]<br>输出：<span class="hljs-number">6</span><br>解释：连续子数组 [<span class="hljs-number">4</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>] 的和最大，为 <span class="hljs-number">6</span> 。<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>不如先从递归开始想</p><p><code>nums[i] = dfs(i-1)+nums[i],nums[i]</code></p><p>每个数字由dfs(i-1)+nums[i] 是把前面的数字加起来</p><p>nums[i] 是还原 代表前面的数字相加之后比原数字小</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-comment"># 每个数字可以选或者不选</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            nums[i] = <span class="hljs-built_in">max</span>(dfs(i-<span class="hljs-number">1</span>)+nums[i],nums[i])<br>            <span class="hljs-keyword">return</span> nums[i]<br>        dfs(<span class="hljs-built_in">len</span>(nums)-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(nums)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp; nums, <span class="hljs-type">int</span> i)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        nums[i] = <span class="hljs-built_in">max</span>(nums[i],nums[i]+<span class="hljs-built_in">dfs</span>(nums,i<span class="hljs-number">-1</span>));<br>        <span class="hljs-keyword">return</span> nums[i];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-built_in">dfs</span>(nums,nums.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            ans = <span class="hljs-built_in">max</span>(ans,nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但是你提交之后 <strong>用时有点长 内存消耗也很大 虽然能过</strong></p><p>现在来把他一比一翻译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">dp[i] = max(dp[i-1]+nums[i],nums[i])<br>nums[i] = max(dfs(i-1)+nums[i],nums[i])<br><br>dp[0] = nums[0]<br><br></code></pre></td></tr></table></figure><p>翻译之后 就能改成迭代形式了 以下是迭代写法 <code>但还不是最优写法</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums))]<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums)):<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>]+nums[i],nums[i])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">100001</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            dp[i] = <span class="hljs-number">-10000</span>;<br>        &#125;<br>        dp[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">max</span>(<span class="hljs-number">-10000</span>,dp[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            dp[i] = <span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>]+nums[i],nums[i]);<br>            ans = <span class="hljs-built_in">max</span>(ans,dp[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>现在已经是迭代了 那有没有什么办法能把空间优化到O(1)呢</p><p>我们只需要用变量维持dp[i-1]就行了</p><p>以下是最终代码</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间复杂度:O(n)</span><br><span class="hljs-comment"># 空间复杂度:O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maxSubArray</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-built_in">max</span>(-<span class="hljs-number">10000</span>,nums[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums)):<br>            nums[i] += <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,nums[i-<span class="hljs-number">1</span>])<br>            ans = <span class="hljs-built_in">max</span>(ans,nums[i])<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度:O(n)</span><br><span class="hljs-comment">// 空间复杂度:O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> ans = <span class="hljs-built_in">max</span>(<span class="hljs-number">-10000</span>,nums[<span class="hljs-number">0</span>]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            nums[i] += <span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,nums[i<span class="hljs-number">-1</span>]);<br>            ans = <span class="hljs-built_in">max</span>(ans,nums[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/04/05/pp5071e.png"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 62.不同路径题解</title>
    <link href="/2023/04/04/leetcode62/"/>
    <url>/2023/04/04/leetcode62/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><span id="more"></span><p>问总共有多少条不同的路径？</p><h3 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：m = 3, n = 2<br>输出：3<br>解释：<br>从左上角开始，总共有 3 条路径可以到达右下角。<br>1. 向右 -&gt; 向下 -&gt; 向下<br>2. 向下 -&gt; 向下 -&gt; 向右<br>3. 向下 -&gt; 向右 -&gt; 向下<br><br>输入：m = 7, n = 3<br>输出：28<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这仍然是一道dp题</p><p>先从递归开始</p><p>和上一题爬楼梯很类似也是方案总数 只不过这道题换成只能往走或者往下</p><p>因此 递归方程式为 <code>dfs(i,j) = dfs(i-1,j)+dfs(i,j-1)</code></p><p>现在来考虑边界条件 首先是 <code>i-1和j-1</code> <code>i &gt;= 1 j &gt;= 1</code></p><p>当走到底的时候要返回1 用于计数 如果找到了答案 则返回0</p><p>因此递归代码为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,j) + <span class="hljs-built_in">dfs</span>(i,j<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (m== &amp;&amp; n == <span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,n<span class="hljs-number">-1</span>); <span class="hljs-comment">// 注意减一</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span>  dfs(i-<span class="hljs-number">1</span>,j) + dfs(i,j-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> m == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> dfs(m-<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>) <span class="hljs-comment"># 注意减一</span><br></code></pre></td></tr></table></figure><p>提交一下 又又又超时了 大量重复计算</p><p>现在到记忆化搜索</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> n == <span class="hljs-number">1</span>): <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i,j</span>):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> j == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> j == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span>  dfs(i-<span class="hljs-number">1</span>,j) + dfs(i,j-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> dfs(m-<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">230</span>][<span class="hljs-number">230</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br>        <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">if</span>(dp[i][j] != <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> dp[i][j];&#125;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">dfs</span>(i<span class="hljs-number">-1</span>,j)+ <span class="hljs-built_in">dfs</span>(i,j<span class="hljs-number">-1</span>);<br>        dp[i][j] = res;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span> &amp;&amp; n==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">220</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">220</span>; j++)&#123;<br>                dp[i][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(m<span class="hljs-number">-1</span>,n<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>但还是很慢 现在就是要把递归中的<code>递</code>去掉</p><p>还是那样 一比一的翻译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">dfs(i,j) = dfs(i-1,j)+dfs(i,j-1)<br>f[i][j] = f[i-1][j]+f[i][j-1]<br>i == 0 dp[i][0] = 1<br>j == 0 dp[0][j] = 1<br></code></pre></td></tr></table></figure><p>终止条件 不变</p><p>以下是最终的代码</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间复杂度：O(m * n)</span><br><span class="hljs-comment"># 空间复杂度: O(m * n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">uniquePaths</span>(<span class="hljs-params">self, m: <span class="hljs-built_in">int</span>, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        dp = [[<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j]+dp[i][j-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> dp[m-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度：O(m * n)</span><br><span class="hljs-comment">// 空间复杂度: O(m * n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> dp[<span class="hljs-number">230</span>][<span class="hljs-number">230</span>];<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">0</span> || j == <span class="hljs-number">0</span>)&#123;<br>                    dp[i][j] = <span class="hljs-number">1</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    dp[i][j] = dp[i<span class="hljs-number">-1</span>][j] + dp[i][j<span class="hljs-number">-1</span>];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> dp[m<span class="hljs-number">-1</span>][n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/04/04/pp5nSrd.png"></p><h2 id="感谢收看"><a href="#感谢收看" class="headerlink" title="感谢收看"></a>感谢收看</h2>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 70.爬楼梯题解</title>
    <link href="/2023/04/04/leetcode70/"/>
    <url>/2023/04/04/leetcode70/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><span id="more"></span><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><h3 id="输入示例"><a href="#输入示例" class="headerlink" title="输入示例"></a>输入示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：n = 2<br>输出：2<br>解释：有两种方法可以爬到楼顶。<br>1. 1 阶 + 1 阶<br>2. 2 阶<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：n = 3<br>输出：3<br>解释：有三种方法可以爬到楼顶。<br>1. 1 阶 + 1 阶 + 1 阶<br>2. 1 阶 + 2 阶<br>3. 2 阶 + 1 阶<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这是一道非常标准的<code>dp入门题</code></p><p>不如我们先从回溯角度可以写</p><p><strong>设n=4</strong> 我们可以从反反向跳下去 每次可以跳1或者2格 因此 我们可以得出 <code>(i-1)</code> 和<code>(i-2)</code> 求方案总数</p><p>所以最终方程是<code>dfs(i-1)+dfs(i-2)</code></p><p>那么另外一个问题来了 终止条件是什么？</p><p>从<code>i-2</code>看到 所以i必须大于2 因为答案不可能是负数</p><p>递归代码如下**(Python 和 C++)**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> i<br>            <span class="hljs-keyword">return</span>  dfs(i-<span class="hljs-number">1</span>) + dfs(i-<span class="hljs-number">2</span>)<br>        <br>        <span class="hljs-keyword">return</span> dfs(n+<span class="hljs-number">1</span>) <span class="hljs-comment"># 注意这里加1是因为自己也要算</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> n;&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-2</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(n+<span class="hljs-number">1</span>); <span class="hljs-comment">// 注意这里加1是因为自己也要算</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>你提交之后 会发现 唉？ 超时了</p><p>因为递归会造成大量重复计算</p><p>从刚才那个例子开始 比如我执行了一次 <code>dfs(n-2)</code> 相当于执行了两次<code>dfs(n-1)</code> 这样会拖慢时间</p><p>因此我们可以改成 记忆化搜索 保存计算结果 <strong>Python 可以用cache装饰器 c++得自己开数组 代码如下</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <br><span class="hljs-meta">        @cache</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">i</span>):<br>            <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> i<br>            <span class="hljs-keyword">return</span>  dfs(i-<span class="hljs-number">1</span>) + dfs(i-<span class="hljs-number">2</span>)<br>        <br>        <span class="hljs-keyword">return</span> dfs(n+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-type">int</span> ans[<span class="hljs-number">50</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> n;&#125;<br>        <span class="hljs-keyword">if</span>(ans[n] != <span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">return</span> ans[n];&#125;<br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-1</span>)+<span class="hljs-built_in">dfs</span>(n<span class="hljs-number">-2</span>);<br>        ans[n] = res;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">50</span>; i++)&#123;<br>            ans[i] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 先把数组初始化</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">dfs</span>(n+<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>ok 那我们能不能把递归去掉 把他改成迭代呢？</p><p><strong>接下来 我们1:1 把递归翻译成动态方程</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">dfs(i) = dfs(i-1)+dfs(i-2)<br>f[i] = f[i-1]+f[i-2]<br></code></pre></td></tr></table></figure><p>好 现在边界条件是<code>f[0] = 1 f[1] = 2</code></p><p>写一个从2开始的循环<code>(注意：要循环次数要小于等于n)</code></p><p>以下是代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度 : O(n)</span><br><span class="hljs-comment">// 空间复杂度: O(n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-type">int</span> ans[<span class="hljs-number">50</span>];<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (n==<span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;&#125;<br>        <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<br>        ans[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        ans[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;<br>            ans[i] = ans[i<span class="hljs-number">-1</span>]+ans[i<span class="hljs-number">-2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans[n<span class="hljs-number">-1</span>];<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间复杂度: O(n)</span><br><span class="hljs-comment"># 空间复杂度: O(n)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <br>        dp = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>        dp[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>            dp[i] = dp[i-<span class="hljs-number">1</span>]+dp[i-<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">return</span> dp[n-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>这里又有一个规律</p><p><strong>dp[i-1] 是上一个状态 dp[i-2] 是上上个状态</strong></p><p>我们能不能用两个变量维持这个状态呢？ <code>见示例代码</code></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 时间复杂度：O(n)</span><br><span class="hljs-comment"># 空间复杂度: O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">climbStairs</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> n <br>        a = <span class="hljs-number">1</span><br>        b = <span class="hljs-number">2</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>            a, b = b, a + b<br>        <span class="hljs-keyword">return</span> b<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 时间复杂度:O(n)</span><br><span class="hljs-comment">// 空间复杂度:O(1)</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">climbStairs</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(n&lt;=<span class="hljs-number">2</span>)&#123;<span class="hljs-keyword">return</span> n;&#125;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">int</span> nxt = b;<br>            b+=a;<br>            a = nxt;<br>        &#125;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/04/04/pp5VU4U.png"></p><h2 id="感谢收看"><a href="#感谢收看" class="headerlink" title="感谢收看"></a>感谢收看</h2>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 831.隐藏个人信息</title>
    <link href="/2023/04/01/leetcode831/"/>
    <url>/2023/04/01/leetcode831/</url>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a>题意描述</h2><p>题目:<a href="https://leetcode.cn/problems/masking-personal-information/">隐藏个人信息</a></p><span id="more"></span><p>给你一条个人信息字符串 s ，可能表示一个 邮箱地址 ，也可能表示一串 电话号码 。返回按如下规则 隐藏 个人信息后的结果：</p><p>电子邮件地址：</p><p>一个电子邮件地址由以下部分组成：</p><p>一个 名字 ，由大小写英文字母组成，后面跟着<br>一个 ‘@’ 字符，后面跟着<br>一个 域名 ，由大小写英文字母和一个位于中间的 ‘.’ 字符组成。’.’ 不会是域名的第一个或者最后一个字符。<br>要想隐藏电子邮件地址中的个人信息：</p><p>名字 和 域名 部分的大写英文字母应当转换成小写英文字母。<br>名字 中间的字母（即，除第一个和最后一个字母外）必须用 5 个 “*****” 替换。<br>电话号码：</p><p>一个电话号码应当按下述格式组成：</p><p>电话号码可以由 <code>10-13</code> 位数字组成<br>后 10 位构成 本地号码<br>前面剩下的 0-3 位，构成 国家代码<br>利用<code> &#123;&#39;+&#39;, &#39;-&#39;, &#39;(&#39;, &#39;)&#39;, &#39; &#39;&#125;</code> 这些 分隔字符 按某种形式对上述数字进行分隔<br>要想隐藏电话号码中的个人信息：</p><p>移除所有 分隔字符<br>隐藏个人信息后的电话号码应该遵从这种格式：<br><code>&quot;***-***-XXXX&quot; 如果国家代码为 0 位数字</code><br><code>&quot;+*-***-***-XXXX&quot; 如果国家代码为 1 位数字</code><br>“+<strong>-</strong><em>-</em><strong>-xxxx” 如果国家代码为 2 位数字<br>``”+</strong><em>-</em><strong>-</strong>*-XXXX” 如果国家代码为 3 位数字<code> </code>“XXXX” 是最后 4 位 本地号码``</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>按题意模拟即可，分开两种情况讨论</p><p>先查找是否有<code>@</code></p><p>有则是邮箱 没有是电话</p><p><del>你能否写一个不用正则表达式下的代码？</del></p><p><strong>时间复杂度:O(n)</strong></p><p><strong>空间复杂度:O(n)</strong></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><strong>Python3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">phone</span>(<span class="hljs-params">self,s,i</span>):<br>        y = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;+&quot;</span> + <span class="hljs-string">&quot;*&quot;</span> * i +<span class="hljs-string">&quot;-&quot;</span><br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)-i - <span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">if</span> ans == <span class="hljs-number">3</span>:<br>                ans = <span class="hljs-number">0</span><br>                y+=<span class="hljs-string">&quot;-&quot;</span><br>            y+=<span class="hljs-string">&quot;*&quot;</span><br>            ans+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> y+<span class="hljs-string">&quot;-&quot;</span> + s[-<span class="hljs-number">4</span>:]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cha</span>(<span class="hljs-params">self,s</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;@&quot;</span> <span class="hljs-keyword">in</span> s <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maskPII</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        a = self.cha(s)<br>        y = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> a==<span class="hljs-literal">True</span>:<br>            i = s.split(<span class="hljs-string">&quot;@&quot;</span>)<br>            i[<span class="hljs-number">0</span>] = i[<span class="hljs-number">0</span>].lower()<br>            y+= i[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;*****&quot;</span>+i[<span class="hljs-number">0</span>][-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;@&quot;</span> + i[<span class="hljs-number">1</span>].lower()<br>            <span class="hljs-keyword">return</span> y<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)):<br>                <span class="hljs-keyword">if</span> s[i] <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot; &quot;</span>] : <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">else</span>: y+=s[i]<br>            n = <span class="hljs-built_in">len</span>(y)<br>            <span class="hljs-keyword">return</span> self.phone(y,n-<span class="hljs-number">10</span>)<br>            <br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br><br>    <span class="hljs-function">string <span class="hljs-title">phone</span><span class="hljs-params">(string s, <span class="hljs-type">int</span> i )</span></span>&#123;<br>        string y = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>)&#123; y+= <span class="hljs-string">&#x27;+&#x27;</span>;&#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)&#123;<br>            y+=<span class="hljs-string">&#x27;*&#x27;</span>;<br>        &#125;<br><br><br>        <span class="hljs-keyword">if</span>(i != <span class="hljs-number">0</span>)&#123; y+= <span class="hljs-string">&#x27;-&#x27;</span>;&#125;<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(ans == <span class="hljs-number">3</span>)&#123;<br>                y+=<span class="hljs-string">&#x27;-&#x27;</span>;<br>                ans = <span class="hljs-number">0</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                y+=<span class="hljs-string">&#x27;*&#x27;</span>;<br>                ans++;<br>            &#125;<br>        &#125;<br>        y+=<span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = s.<span class="hljs-built_in">size</span>()<span class="hljs-number">-4</span>; j &lt; s.<span class="hljs-built_in">size</span>(); j++)&#123;<br>            y+=s[j];<br>        &#125;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">mail</span><span class="hljs-params">(string s)</span></span>&#123;<br>        <span class="hljs-type">bool</span> a = <span class="hljs-literal">false</span>;<br>        string y = <span class="hljs-string">&quot;&quot;</span>;<br>        y+=<span class="hljs-built_in">tolower</span>(s[<span class="hljs-number">0</span>]);<br>        y+=<span class="hljs-string">&quot;*****&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;@&#x27;</span>)&#123;<br>                a = <span class="hljs-literal">true</span>;<br>                y+=<span class="hljs-built_in">tolower</span>(s[i<span class="hljs-number">-1</span>]);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(a== <span class="hljs-literal">true</span>)&#123;<br>                y+=<span class="hljs-built_in">tolower</span>(s[i]);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cha</span><span class="hljs-params">(string s)</span></span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span> (s[i]==<span class="hljs-string">&#x27;@&#x27;</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function">string <span class="hljs-title">maskPII</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        <span class="hljs-type">bool</span> a = <span class="hljs-built_in">cha</span>(s);<br>        <span class="hljs-keyword">if</span>(a==<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">mail</span>(s);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            string x = <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++)&#123;<br>                <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;+&#x27;</span>||s[i]==<span class="hljs-string">&#x27;-&#x27;</span>||s[i]==<span class="hljs-string">&#x27;(&#x27;</span>||s[i]==<span class="hljs-string">&#x27;)&#x27;</span>||s[i]==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    x+=s[i];<br>                    n++;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">phone</span>(x,n<span class="hljs-number">-10</span>);<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="到此结束"><a href="#到此结束" class="headerlink" title="到此结束"></a>到此结束</h2><p><img src="https://s1.ax1x.com/2023/04/01/ppW0AdU.png" alt="w"></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode LCP01.猜数字</title>
    <link href="/2023/03/31/LCP01/"/>
    <url>/2023/03/31/LCP01/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h4 id="题目-LCP-猜数字"><a href="#题目-LCP-猜数字" class="headerlink" title="题目:LCP 猜数字"></a>题目:<a href="https://leetcode.cn/problems/guess-numbers/?favorite=7cyqwuv">LCP 猜数字</a></h4><span id="more"></span><p>小A 和 小B 在玩猜数字。小B 每次从 1, 2, 3 中随机选择一个，小A 每次也从 1, 2, 3 中选择一个猜。他们一共进行三次这个游戏，请返回 小A 猜对了几次？</p><p>输入的guess数组为 小A 每次的猜测，answer数组为 小B 每次的选择。guess和answer的长度都等于3。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接按题意模拟即可</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">game</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; guess, vector&lt;<span class="hljs-type">int</span>&gt;&amp; answer)</span> </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; guess.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(guess[i]==answer[i])&#123;a++;&#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>Python3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">game</span>(<span class="hljs-params">self, guess: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], answer: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        a = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(guess)):<br>            <span class="hljs-keyword">if</span> guess[i] == answer[i]: a+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> a<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/03/30/pp2DqMt.png" alt="w"></p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>lcp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode LCP06.拿硬币</title>
    <link href="/2023/03/31/LCP06/"/>
    <url>/2023/03/31/LCP06/</url>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>题目:<a href="https://leetcode.cn/problems/na-ying-bi/">拿硬币</a></p><p>桌上有 n 堆力扣币，每堆的数量保存在数组 coins 中。我们每次可以选择任意一堆，拿走其中的一枚或者两枚，求拿完所有力扣币的最少次数。</p><span id="more"></span><p>示例 1：</p><p>输入：<code>[4,2,1]</code></p><p>输出：<code>4</code></p><p>解释：第一堆力扣币最少需要拿 2 次，第二堆最少需要拿 1 次，第三堆最少需要拿 1 次，总共 4 次即可拿完。</p><p>示例 2：</p><p>输入：<code>[2,3,10]</code></p><p>输出：<code>8</code></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>这时候得分开两种情况讨论</p><p>如果<code>f[i]&lt;2</code> 则算1次</p><p>如果<code>f[i]&gt;=2</code>则算 <code>f[i] / 2 + f[i] % 2</code></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p><strong>Python3</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minCount</span>(<span class="hljs-params">self, coins: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(coins)):<br>            <span class="hljs-keyword">if</span> coins[i] &lt; <span class="hljs-number">2</span>:<br>                ans+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                ans += coins[i] // <span class="hljs-number">2</span> + coins[i] % <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCount</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; coins)</span> </span>&#123;<br>        <span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; coins.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">if</span>(coins[i] &lt; <span class="hljs-number">2</span>)&#123;<br>                a++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                a+=(coins[i]/<span class="hljs-number">2</span> + coins[i] % <span class="hljs-number">2</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/03/31/ppRImee.png" alt="w"></p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>lcp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1.两数之和</title>
    <link href="/2023/03/28/leetcode1/"/>
    <url>/2023/03/28/leetcode1/</url>
    
    <content type="html"><![CDATA[<p>题目:两数之和 <a href="https://leetcode.cn/problems/two-sum/">链接</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><span id="more"></span><p>给定一个整数数组<code>nums</code>和一个整数目标值 <code>target</code>，请你在该数组中找出 和为目标值<code>target</code> 的那 两个 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">输入：nums = [2,7,11,15], target = 9<br>输出：[0,1]<br>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br><br>输入：nums = [3,2,4], target = 6<br>输出：[1,2]<br><br>输入：nums = [3,3], target = 6<br>输出：[0,1]<br></code></pre></td></tr></table></figure><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>1.<strong>暴力法</strong></p><p>我们不难的可以发现，可以用两层for循环去枚举答案 选择第一个数，然后再选择其他数字，最后就可以得出正确答案</p><p>时间复杂度:O(n^2)</p><p>空间复杂度:O(1)</p><p>2.<strong>哈希表</strong></p><p>我们直接遍历一次数组，例如从示例一<code>nuns=[2,7,11,15] target=9</code> 创建一个哈希表，从第一个数字2开始，9-2=7，7不在哈希表，先把2<code>=&gt;</code>1保存起来，遍历到第二个数字，7，9-7=2,此时2在哈希表里，返回<code>[0,1]</code></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>1.暴力</p><p><strong>Python</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Py"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums)):<br>                <span class="hljs-keyword">if</span> nums[i]+nums[j]==target:<br>                    <span class="hljs-keyword">return</span> [i,j]<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = i+<span class="hljs-number">1</span>; j &lt; nums.<span class="hljs-built_in">size</span>(); j++)&#123;<br>                <span class="hljs-keyword">if</span>(nums[i]+nums[j]==target)&#123;<br>                    <span class="hljs-keyword">return</span> &#123;i,j&#125;;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>2.哈希表</p><p><strong>Python</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:<br>        a = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> target-nums[i] <span class="hljs-keyword">in</span> a: <span class="hljs-keyword">return</span> [a[target-nums[i]],i]<br>            <span class="hljs-keyword">else</span>: a[nums[i]] = i<br></code></pre></td></tr></table></figure><p><strong>C++</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        unordered_map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; hashmap;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)&#123;<br>            <span class="hljs-keyword">auto</span> h  = hashmap.<span class="hljs-built_in">find</span>(target-nums[i]);<br>            <span class="hljs-keyword">if</span>(h != hashmap.<span class="hljs-built_in">end</span>())&#123;<br>                <span class="hljs-keyword">return</span> &#123;hashmap[target-nums[i]],i&#125;;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                hashmap[nums[i]] = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h2><p><img src="https://s1.ax1x.com/2023/03/28/pp6LZkj.png" alt="w"></p><p>感谢你的收看</p>]]></content>
    
    
    <categories>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>哈希表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023最新的nonebot2配置教程</title>
    <link href="/2023/03/26/nonebot2_cr/"/>
    <url>/2023/03/26/nonebot2_cr/</url>
    
    <content type="html"><![CDATA[<p>大家好，由于最近<code>nonebot2</code>的更新，官方的已经不再生成<code>bot.py</code>所以今天来教大家，如何在创建项目，并运行项目</p><span id="more"></span><p>**本文写于2023-03-26 **</p><h2 id="1-下载nb-cli"><a href="#1-下载nb-cli" class="headerlink" title="1.下载nb-cli"></a>1.下载nb-cli</h2><p>首先在你的桌面<code>空白处</code>用按住键盘<code>shift</code>键，加上你的鼠标<code>右键</code></p><p>不出意料的话如下图所示</p><p><img src="https://s1.ax1x.com/2023/03/26/ppraIzQ.jpg" alt="ppraIzQ.jpg"></p><p>选择<code>打开powershell</code></p><p>输入如下三句命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install nb-cli<br>pip install nonebot2<br>pip install nonebot2[fastapi]<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2023/03/26/ppravJU.jpg" alt="就这样"></p><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h2><p>这个时候切记不要关闭你的<code>powershell</code></p><p>输入一句<code>nb</code>然后回车</p><p>选择创建项目</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdnQH.jpg" alt="创建项目"></p><p>回车</p><p><strong>上下选择 回车确认</strong> 选择<code>开发者</code></p><p><img src="https://s1.ax1x.com/2023/03/26/pprdlwt.jpg" alt="选择开发者"></p><p>输入名字，回车</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdGY8.jpg" alt="输入名字，回车"></p><p><strong>注意：上下切换选项目 空格选择 回车确认</strong> 一定要记住</p><p>选择<code>fastapi</code></p><p><img src="https://s1.ax1x.com/2023/03/26/pprd0wq.jpg" alt="fastapi"></p><p>选择<code>onebot v11</code>协议 </p><p><img src="https://s1.ax1x.com/2023/03/26/pprdcpF.jpg" alt="onebot"></p><p>选择在<code>scr</code>目录下</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdRX9.jpg" alt="scr"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">立即安装依赖 输入y<br>创建虚拟环境 输入n<br></code></pre></td></tr></table></figure><p>接下来 选择echo插件</p><p><img src="https://s1.ax1x.com/2023/03/26/pprdTfO.jpg" alt="echo"></p><p>回车</p><p>大功告成</p><h2 id="3-运行nonebot2"><a href="#3-运行nonebot2" class="headerlink" title="3.运行nonebot2"></a>3.运行nonebot2</h2><p>打开你的文件夹</p><p>以下是文件的介绍</p><p><img src="https://s1.ax1x.com/2023/03/26/pprwfgg.png" alt="123"></p><p>先打开<code>env.dev</code> 复制粘贴如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">HOST=0.0.0.0  <span class="hljs-comment"># 配置 NoneBot 监听的 IP / 主机名 默认127.0.0.1</span><br>PORT=8080  <span class="hljs-comment"># 配置 NoneBot 监听的端口 这里设置成你的cq监听接口</span><br>COMMAND_START=[<span class="hljs-string">&quot;/&quot;</span>]  <span class="hljs-comment"># 配置命令起始字符</span><br>COMMAND_SEP=[<span class="hljs-string">&quot;.&quot;</span>]  <span class="hljs-comment"># 配置命令分割字符</span><br></code></pre></td></tr></table></figure><p><code>pyproject.toml</code>修改如下</p><p><img src="https://s1.ax1x.com/2023/03/26/ppr00iV.png" alt="q"></p><p>启动nonebot</p><p>先在此文件夹打开你的shell</p><p>参考<code>步骤1</code></p><p>然后输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nb run<br></code></pre></td></tr></table></figure><p>出现下图你的nb就启动成功了</p><p><img src="https://s1.ax1x.com/2023/03/26/ppr0rzF.png" alt="test"></p><h2 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h2><p>感谢你看到这里 关于<strong>个人如何编写插件</strong> 将放到7月份讲 如有问题可以点击博客上面的<code>关于</code>加作者qq</p><p>~~拜拜</p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bingyue-dic变量大全</title>
    <link href="/2022/11/12/bldq/"/>
    <url>/2022/11/12/bldq/</url>
    
    <content type="html"><![CDATA[<h1 id="目前已适配的语法"><a href="#目前已适配的语法" class="headerlink" title="目前已适配的语法"></a>目前已适配的语法</h1><ul><li><input checked="" disabled="" type="checkbox"> <code>如果</code><span id="more"></span></li><li><input checked="" disabled="" type="checkbox"> <code>如果尾</code></li><li><input checked="" disabled="" type="checkbox"> <code>返回</code></li><li><input checked="" disabled="" type="checkbox"> <code>取变量</code>   </li><li><input checked="" disabled="" type="checkbox"> <code>正则</code></li></ul><p><br></br></p><h1 id="目前适配的变量"><a href="#目前适配的变量" class="headerlink" title="目前适配的变量"></a>目前适配的变量</h1><ul><li><input checked="" disabled="" type="checkbox"> <code>%QQ%</code>：发言人QQ</li><li><input checked="" disabled="" type="checkbox"> <code>%Robot%</code> 机器人QQ</li><li><input checked="" disabled="" type="checkbox"> <code>%群号%</code> 获取qq群号</li><li><input checked="" disabled="" type="checkbox"> <code>$禁 群号 QQ 秒数$</code> 群里禁言</li><li><input checked="" disabled="" type="checkbox"> <code>$读 路径/路径 a 0$</code> 读取文件</li><li><input checked="" disabled="" type="checkbox"> <code>$随机数 0 1$</code> 随机数</li><li><input checked="" disabled="" type="checkbox"> <code>$改 群号 QQ 名字$</code> 改群里名字</li><li><input checked="" disabled="" type="checkbox"> <code>$访问 网址$</code> 访问链接</li><li><input checked="" disabled="" type="checkbox"> <code>%管理员%</code> 获取管理员列表 以json形式返回</li><li><input checked="" disabled="" type="checkbox"> <code>%主人%</code> 获取主人qq号</li><li><input checked="" disabled="" type="checkbox"> <code>$写 路径/路径 a 0$</code> 写文件</li><li><input checked="" disabled="" type="checkbox"> <code>$群头衔 群号 QQ 内容$</code> 给头衔的</li><li><input checked="" disabled="" type="checkbox"> <code>$全体禁言 群号 开$</code> 全体禁言</li><li><input checked="" disabled="" type="checkbox"> <code>$获取 消息类型 第几个$</code> 获取消息参数</li><li><input checked="" disabled="" type="checkbox"> <code>$管理员 %QQ%$</code> 判断该qq号在不在词库管理员列表 true则返回qq号 false返回0</li><li><input checked="" disabled="" type="checkbox"> <code>$JSON长度 JSON$</code>获取数组长度</li></ul><p><br></br></p><h1 id="未来打算适配的"><a href="#未来打算适配的" class="headerlink" title="未来打算适配的"></a>未来打算适配的</h1><ul><li>[] <code>$取json$</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>dic</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>dic</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 1678.设计Goal解析器</title>
    <link href="/2022/11/06/leetcode1678/"/>
    <url>/2022/11/06/leetcode1678/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">请你设计一个可以解释字符串<span class="hljs-built_in">command</span>的Goal 解析器。<span class="hljs-built_in">command</span>由<span class="hljs-string">&quot;G&quot;</span>、<span class="hljs-string">&quot;()&quot;</span>和/或<span class="hljs-string">&quot;(al)&quot;</span>按某种顺序组成。<br>Goal 解析器会将<span class="hljs-string">&quot;G&quot;</span>解释为字符串<span class="hljs-string">&quot;G&quot;</span>、<span class="hljs-string">&quot;()&quot;</span>解释为字符串<span class="hljs-string">&quot;o&quot;</span>，<span class="hljs-string">&quot;(al)&quot;</span>解释为字符串<span class="hljs-string">&quot;al&quot;</span>。然后，按原顺序将经解释得到的字符串连接成一个字符串。<br><br>给你字符串<span class="hljs-built_in">command</span>，返回Goal解析器对<span class="hljs-built_in">command</span>的解释结果。<br><br>示例 1：<br>输入：<span class="hljs-built_in">command</span> = <span class="hljs-string">&quot;G()(al)&quot;</span> 输出：<span class="hljs-string">&quot;Goal&quot;</span> <br>解释：Goal 解析器解释命令的步骤如下所示： G -&gt; G () -&gt; o (al) -&gt; al 最后连接得到的结果是 <span class="hljs-string">&quot;Goal&quot;</span><br></code></pre></td></tr></table></figure><p><br></br></p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">interpret</span>(<span class="hljs-params">self, command: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> command.replace(<span class="hljs-string">&quot;()&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>).replace(<span class="hljs-string">&quot;(al)&quot;</span>,<span class="hljs-string">&quot;al&quot;</span>)<br></code></pre></td></tr></table></figure><p><br></br></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>直接替换就完事<br></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 34.反转字符串题解</title>
    <link href="/2022/11/06/leetcode34/"/>
    <url>/2022/11/06/leetcode34/</url>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组s的形式给出。<br>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。<br><br>示例 1：<br>输入：s = [<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;o&quot;</span>] 输出：[<span class="hljs-string">&quot;o&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;l&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>] <br><br>示例 2：<br>输入：s = [<span class="hljs-string">&quot;H&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;h&quot;</span>] 输出：[<span class="hljs-string">&quot;h&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;n&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;H&quot;</span>]<br></code></pre></td></tr></table></figure><p><br></br></p><h2 id="题解代码"><a href="#题解代码" class="headerlink" title="题解代码"></a>题解代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">reverseString</span>(<span class="hljs-params">self, s: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]</span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify s in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        u = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(s)/<span class="hljs-number">2</span>)<br>        i = -<span class="hljs-number">1</span><br>        h =  <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> h &lt; u:<br>            s[h],s[i] = s[i],s[h]<br>            h += <span class="hljs-number">1</span><br>            i += -<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p><br></br></p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>我们不难发现 其实它只是互相一起交换位置而已<br><br>直接用两个指针 一个记录向前的索引 一个记录向后索引<br><br>因为循环一次要两个索引 所以要除2得出总次数<br></p>]]></content>
    
    
    <categories>
      
      <category>code</category>
      
      <category>leetcode</category>
      
    </categories>
    
    
    <tags>
      
      <tag>leetcode</tag>
      
      <tag>code</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>欢迎来telegram找我</title>
    <link href="/2022/10/05/telegram/"/>
    <url>/2022/10/05/telegram/</url>
    
    <content type="html"><![CDATA[<p>已入住<code>telegram</code><br><br>欢迎大家找我玩！<br><br><a href="https://t.me/binhe23">bingyue</a><br><br><img src="https://s1.ax1x.com/2022/10/05/x1pU6f.jpg" alt="嗨"></p>]]></content>
    
    
    <categories>
      
      <category>telegram</category>
      
    </categories>
    
    
    <tags>
      
      <tag>telegram</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bingyue-dic安装文档</title>
    <link href="/2022/10/04/bingyue-dic2/"/>
    <url>/2022/10/04/bingyue-dic2/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.确保你会登陆<code>go-cqhttp</code><br><br>2.确保你电脑已经有python<br></p><span id="more"></span><p>如果没有可以点下面链接<br><br><a href="https://blog.bingyue.xyz/2022/10/03/cq_1/">go-cqhttp</a><br><br><a href="https://blog.bingyue.xyz/2022/10/03/python_start/">python</a><br></p><p><br></br></p><h2 id="下载bydic"><a href="#下载bydic" class="headerlink" title="下载bydic"></a>下载bydic</h2><p>1.访问<a href="https://github.com/bingqiu456/bingyue-dic/releases">这个网址</a><br><br><img src="https://s1.ax1x.com/2022/10/04/xQxFb9.png" alt="如图"><br><br>2.找到最新版 点击<code>蓝色字</code>就能下载(记住一定要下前面是<code>bingyue-dic</code>开头的)<br><br><img src="https://s1.ax1x.com/2022/10/04/xQxm8K.png" alt="我这里最新版是beta0.9.2，请以最新版为准"><br><br>3.解压<br><br>玩过电脑的都会吧….<br><br>4.运行如下<br><img src="https://s1.ax1x.com/2022/10/04/xQxMKe.png" alt="先安装依赖，然后检查更新，如果没有更新就直接启动"></p><h2 id="启动go-cqhttp"><a href="#启动go-cqhttp" class="headerlink" title="启动go-cqhttp"></a>启动go-cqhttp</h2><p>1.然后去启动你配置好的cq<br><br>2.没配置的点<a href="https://blog.bingyue.xyz/2022/10/03/cq_1/">这里</a> 记住端口号一定要20000<br><br>3.运行<code>go-cqhttp.bat</code><br><br>4.把窗口挂住 <code>(最小化)</code><br></p><p><br></br></p><h2 id="启动nonebot-bingyue-dic插件"><a href="#启动nonebot-bingyue-dic插件" class="headerlink" title="启动nonebot (bingyue-dic插件)"></a>启动nonebot (bingyue-dic插件)</h2><p>1.返回刚才下载的dic<br><br>2.运行<code>点我启动.bat</code><br><br>3.出现下图说明你成功了<br><br><img src="https://s1.ax1x.com/2022/10/04/xQx8UI.png"><br></p><p><br></br></p><h2 id="如何编写词库"><a href="#如何编写词库" class="headerlink" title="如何编写词库"></a>如何编写词库</h2><p>1.在dic的目录下<br><br><img src="https://s1.ax1x.com/2022/10/04/xQxUxS.png" alt="点进去这里"><br><br>2.你的词库在这里<br><br><img src="https://s1.ax1x.com/2022/10/04/xQxdKg.png" alt="这里"><br></p><p><br></br></p><h2 id="关于变量大全"><a href="#关于变量大全" class="headerlink" title="关于变量大全"></a>关于变量大全</h2><p>还在写….</p>]]></content>
    
    
    <categories>
      
      <category>dic</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>dic</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bingyue-dic使用文档</title>
    <link href="/2022/10/03/bingyue-dic/"/>
    <url>/2022/10/03/bingyue-dic/</url>
    
    <content type="html"><![CDATA[<div align="center"><h1 id="Bingyue-Dictionary"><a href="#Bingyue-Dictionary" class="headerlink" title="Bingyue Dictionary"></a>Bingyue Dictionary</h1><p><em>✨ 一个可以支持变量的词库系统 基于nonebot2✨</em><br>    <br></br></p></div><span id="more"></span><h1 id="如何安装-如何使用"><a href="#如何安装-如何使用" class="headerlink" title="如何安装?如何使用?"></a>如何安装?如何使用?</h1><p>1.首先确保电脑上有<code>python3.7或者更高版本</code></p><p>2.打开你的<code>cmd</code></p><p>3.先把镜像站切换到清华源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip config <span class="hljs-built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple<br></code></pre></td></tr></table></figure><p>4.然后安装我的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install bingyue-dic<br></code></pre></td></tr></table></figure><p>5.如果出现<code>Requirement already</code>或者<code>Successfully</code>就说明已经安装成功</p><p>6.加载到nonebot上</p><p>打开你的<code>bot.py</code> 加上这条语句</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nonebot.load_plugin(<span class="hljs-string">&quot;bingyue_dic&quot;</span>)<br></code></pre></td></tr></table></figure><p>同时在你的<code>.env.dev（nonebot配置文件）</code>加上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">owner_dic=1212212<br>admin_dic=[<span class="hljs-string">&quot;1001&quot;</span>,<span class="hljs-string">&quot;10212&quot;</span>]<br></code></pre></td></tr></table></figure><p>7.在你的nonebot机器人目录下 新建一个叫<code>dic</code>的文件夹</p><p>再新建一个<code>dic.txt</code></p><p>就能开始编写词库了</p><p><br></br></p><h1 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h1><p>1.确保你电脑已经拥有<code>python3.7</code>或<code>更高版本</code><br><br>2.<a href="https://github.com/bingqiu456/bingyue-dic/releases/download/0.9.0/bingyue-dic.zip">点击下载部署包</a><br><br>3.解压<br><br>4.运行<code>安装依赖库.bat</code><br><br>5.运行<code>点我启动.bat</code><br><br>6.在<code>cq配置文件里</code> <br></p><p>找到<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">universal: ws://your_websocket_universal.server<br></code></pre></td></tr></table></figure><p>改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">universal: ws://127.0.0.1:20000/onebot/v11/ws/<br></code></pre></td></tr></table></figure><p><br></br></p><h1 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h1><p>1.打开你的<code>.env.dev</code><br><br>2.输入如下<code>(已有的无需重复操作)</code><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">owner_dic=0 <span class="hljs-comment">##词库主人</span><br>admin_dic=[<span class="hljs-string">&quot;0&quot;</span>] <span class="hljs-comment">##词库管理员列表</span><br></code></pre></td></tr></table></figure><p>3.保存</p><p><br></br></p><h1 id="截图预览"><a href="#截图预览" class="headerlink" title="截图预览"></a>截图预览</h1><p><img src="https://s1.ax1x.com/2022/10/03/xQFtQP.jpg" alt="效果如下"></p><p><br></br></p><h1 id="关于最后"><a href="#关于最后" class="headerlink" title="关于最后"></a>关于最后</h1><ul><li>作者 : Bingyue</li><li>QQ : 35***19417</li><li>github : bingqiu456</li><li>编写时间 2022-10-02 13:33:02</li></ul><p>最后本项目<br><br>仅供<code>研究学习</code> 请不要<code>内战</code><br><br>但我劝你最好去学<code>python</code> 编写属于自己的插件<br><br><code>伪代码</code>没啥前途 说真的<br><br>更新随缘<br><br>同时也不要拿去跟某些框架比<br></p>]]></content>
    
    
    <categories>
      
      <category>dic</category>
      
      <category>code</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>dic</tag>
      
      <tag>qq机器人</tag>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python基础安装</title>
    <link href="/2022/10/03/python_start/"/>
    <url>/2022/10/03/python_start/</url>
    
    <content type="html"><![CDATA[<h2 id="遇到问题？"><a href="#遇到问题？" class="headerlink" title="遇到问题？"></a>遇到问题？</h2><p>请直接看F&amp;A<br><br></br></p><h2 id="下载python"><a href="#下载python" class="headerlink" title="下载python"></a>下载python</h2><p>1.首先我们找到python官网<br><br><a href="https://www.python.org/">点这里即可进入</a><br></p><span id="more"></span><p><img src="https://s1.ax1x.com/2022/10/03/xMHF1A.png" alt="如图"><br><br>如果进不去<strong>python官网</strong> 请直接看最下面</p><p>2.点击<code>蓝色字体</code><br><br>往下滑<br><br><img src="https://s1.ax1x.com/2022/10/03/xMHf9H.png" alt="找到`Windows installer (32-bit)`或`Windows installer (64-bit)`"><br><br>如果你电脑是<code>32位</code> 请下载<code>Windows installer (32-bit)</code><br><br>如果你电脑是<code>64位</code> 请下载<code>Windows installer (64-bit)</code><br></p><p>3.打开安装<br><br><img src="https://s1.ax1x.com/2022/10/03/xMOQaV.png" alt="先勾选这里的`add python ...` 然后点击``install``"><br><br>最后出现<code>setup was successful</code>代表安装成功了<br><br><img src="https://s1.ax1x.com/2022/10/03/xMXXXd.png" alt="如图"><br></p><p><br></br></p><h2 id="F-amp-A"><a href="#F-amp-A" class="headerlink" title="F&amp;A"></a>F&amp;A</h2><p>F:出现了这种情况咋办，没有安装选项<img src="https://s1.ax1x.com/2022/10/03/xMqSRH.png" alt="如图"><br><br>A:说明你电脑已经安装过python 请检查是不是<code>python3.7或更高版本</code><br><br><br><br>F:setup failed <img src="https://s1.ax1x.com/2022/10/03/xML1cd.png" alt="如图"><br><br>A:说明你的电脑系统版本低 请看下面<br></p><p><br></br></p><h2 id="进不去python官网咋办"><a href="#进不去python官网咋办" class="headerlink" title="进不去python官网咋办"></a>进不去python官网咋办</h2><p>1.<code>windows7</code>用户看这里<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">链接:https://www.aliyundrive.com/s/9zazYzVP96z<br>密码:2dq2<br></code></pre></td></tr></table></figure><p>自己进去下载<code>python</code><br><br><br><br>2.<code>Windows8.1或更高版本</code>看这里<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">链接:https://www.aliyundrive.com/s/vrU96eKsg1B<br>密码:i2e1<br></code></pre></td></tr></table></figure><p>自己进去下载<code>python</code><br></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>code</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>手把手教你配置go-cqhttp</title>
    <link href="/2022/10/03/cq_1/"/>
    <url>/2022/10/03/cq_1/</url>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>hello,我是<code>bingyue</code>今天教大家，如何使用cqhttp搭建qq机器人</li><li>一台能上网的电脑<span id="more"></span><br></br></li></ul><h2 id="下载cqhttp"><a href="#下载cqhttp" class="headerlink" title="下载cqhttp"></a>下载cqhttp</h2><p>1.<a href="https://github.com/Mrs4s/go-cqhttp/releases/download/v1.0.0-rc2/go-cqhttp_windows_amd64.zip">点这里下载</a><br><br><img src="https://s1.ax1x.com/2022/10/03/xMRWyF.png" alt="官方页面"></p><p>3.<code>下载好了后</code> 解压<br><br><img src="https://s1.ax1x.com/2022/10/03/xMRXOe.png" alt="解压好了就关闭"></p><p>4.打开<code>go-cqhttp.exe</code><br><br><img src="https://s1.ax1x.com/2022/10/03/xMW9Yt.png" alt="双击打开"></p><p>5.点击<code>确定</code><br><br><img src="https://s1.ax1x.com/2022/10/03/xMWiSf.png" alt="一路确定"><br><img src="https://s1.ax1x.com/2022/10/03/xMWKf0.png" alt="一路确定"><br><img src="https://s1.ax1x.com/2022/10/03/xMWuYq.png" alt="一路确定"></p><p>6.打开<code>go-cqhttp.bat</code><br><br><img src="https://s1.ax1x.com/2022/10/03/xMWllT.png" alt="页面如下"><br>输入<code>3</code>然后按<code>回车</code><br></p><p><br></br><br>7.这个时候我们回到目录文件夹<br><br>这个时候你会发现多了一个<code>config.yml</code>文件<br><br>我们用记事本打开 <code>如果你电脑有专业的文本编辑器 建议使用编辑器</code><br></p><p><br></br></p><h2 id="配置登陆"><a href="#配置登陆" class="headerlink" title="配置登陆"></a>配置登陆</h2><p>1.接下来 我们打开<code>config.yml</code>文件<br><br><img src="https://s1.ax1x.com/2022/10/03/xMWB6O.png" alt="如图"></p><p>2.找到<code>uin</code>和<code>password</code><br><br>修改为自己机器人的账号和密码<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">uin: 10001 <span class="hljs-comment"># QQ账号</span><br>password: <span class="hljs-string">&#x27;wosjxn&#x27;</span> <span class="hljs-comment"># 密码为空时使用扫码登录</span><br></code></pre></td></tr></table></figure><p><br></br><br><img src="https://s1.ax1x.com/2022/10/03/xMWDXD.png" alt="示例"></p><p>3.滑到最下面<br><br>找到<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">universal: ws://your_websocket_universal.server<br></code></pre></td></tr></table></figure><p>改成<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">universal: ws://127.0.0.1:20000/onebot/v11/ws/<br></code></pre></td></tr></table></figure><p>一定要记住端口号 后面要用到 <code>端口号是20000</code><br><br><img src="https://s1.ax1x.com/2022/10/03/xMWong.png" alt="改好后的"><br>改好后保存</p><p><br></br></p><h3 id="启动go-cqhttp"><a href="#启动go-cqhttp" class="headerlink" title="启动go-cqhttp"></a>启动go-cqhttp</h3><p>返回文件根目录<br><br>打开<code>go-cqhttp.bat</code><br><br>根据提示进行<code>扫码登陆</code></p>]]></content>
    
    
    <categories>
      
      <category>qq机器人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bot</tag>
      
      <tag>qq机器人</tag>
      
      <tag>cqhttp</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
